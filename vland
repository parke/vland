#! /bin/sh


#  vland.sh  -  Create and use chroot-style virtual software environments.
#  Copyright (c) 2022 Parke Bostrom, parke.nexus at gmail.com
#  Distributed under GPLv3 (see end of file) WITHOUT ANY WARRANTY.


readonly  VLAND_VERSION='0.22.0'    #  20220111


#  vland.sh expects /bin/sh to be dash (or busybox or bash).


set  -o errexit

readonly  VLAND_EXE="$(  realpath  "$0"  )"


help_common  ()  {    #  ----------------------------------------  help_common
  echo  \
"
usage:  vland  --operation  [option ...]
        vland  overlay  [guest]  [option ...]  [-- command ...]

mini tutorial:
$  vland  --create  arch    #  Create an Arch Linux guest named 'arch'.
$  vland  arch  -nr         #  Enter the 'arch' guest as root."  ;  }


help  ()  {    #  ------------------------------------------------------  help
  help_common
  echo  ;  echo  'For more help, please run:  vland  --help-more'  ;  }


help_more  ()  {    #  --------------------------------------------  help_more
  echo  \
"
usage:  vland  --operation  [option ...]
        vland  overlay  [guest]  [option ...]  [-- command ...]

an example:
$  vland  --create  arch    #  Create an Arch Linux guest named 'arch'.
$  vland  arch  -nr         #  Enter the 'arch' guest as root.

To create a guest and overlay, run:
$  vland  --create  distro  [guest]  [overlay]
If not specified, guest   defaults to distro.
If not specified, overlay defaults to guest.

To run a shell (or a command) in a guest, run:
$  vland  overlay  [guest]  [option ...]  [-- command [arg ...]]
If guest is not specified, the overlay's default guest will be used.
Any specified options are simply passed through to lxroot.
If no command is specified, vland will run an interactive shell in the guest.

Common lxroot options:
-n    grant the guest access to the host's network interfaces
-r    simulate uid = 0 (root)
-w    grant full write access (even to a non-root user)
-x    grant the guest access to the host's Xorg server
For additional lxroot options, please see the lxroot documentation.

Supported distros:
alpine     Alpine Linux
arch       Arch Linux
void       Void Linux
void-musl  Void Linux (with musl libc)

Fyi, the default location for guests and overlays is either:
\$HOME/.local/vland  or  /vland/\$USER

Operations:

--version
--help
--help-more

--create      distro  [guest]  [overlay]
--download    distro

--pkg         overlay  [guest]  action  [--]  [package ...]
--aur         overlay  [guest]  action  [--]  [package ...]

--self-test
--self-test-full
--self-test-clean"

  return  ;  }


main  ()  {    #  ------------------------------------------------------  main

  main_cpu_check
  main_config_load

  case  "$1"  in

    (  ''           )  main_status   ;  exit  ;;
    (  --help       )  help          ;  exit  ;;
    (  --help-more  )  help_more     ;  exit  ;;
    (  --version    )  main_version  ;  exit  ;;

    (  --create     )  create         "$@"    ;;
    (  --download   )  main_download  "$@"    ;;
    (  --pkg        )  pkg            "$@"    ;;
    (  --aur        )  pkg            "$@"    ;;
    (  --list       )  main_list              ;;
    #  --overlay    )  TODO                   ;;

    #  undocumented internal commands
    (  --aria2c-install   )  aria2c_install   ;;
    (  --lxroot-install   )  lxroot_install   ;;
    (  --self-test        )  self_test        ;;
    (  --self-test-full   )  self_test_full   ;;
    (  --self-test-clean  )  self_test_clean  ;;

    #  wildcard commands
    (  --*  )  die  "vland  error  invalid option  '$1'"  ;;
    (  *    )  main_launch  "$@"  ;;
    esac

  echo  ;  echo  "vland  done  '$*'"

  exit  ;  }


###  vland global variables  -------------------------  vland global variables
#
#  overlay_name    the name of the overlay
#  guest_name      the name of the guest
#  distro          the name of the distro
#
#  vland_dir       typically:  $HOME/.local/vland  or  /vland/$USER
#  overlay         typically:  $vland_dir/overlay/$overlay_name
#  overlay_home    typically:  $overlay/${HOME#/}
#  guest           typcially:  $vland_dir/guest/$guest_name
#
#  tgz_url         typically:  the url of distro rootfs tarball
#  tgz             typically:  the filename portion of $tgz_url
#  dist_path       typically:  $vland_dir/dist/$distro/$tgz


main_config_load  ()  {    #  ------------------------------  main_config_load
  local  path="$HOME/.config/vland/vland.conf"
  [ -f "$path" ]  &&  .  "$path"
  readonly  vland_dir="$(  main_config_vland_dir  )"
  return  ;  }


main_config_vland_dir  ()  {    #  --------------------  main_config_vland_dir
  #  usage:  main_config_vland_dir
  local  hlv="$HOME"/.local/vland
  [    "$vland_dir"   ]  &&  {  echo  "$vland_dir"    ;  return  ;  }
  [ -d "$hlv/guest"   ]  &&  {  echo  "$hlv"          ;  return  ;  }
  [ -d "/vland/$USER" ]  &&  {  echo  "/vland/$USER"  ;  return  ;  }
  echo  "$hlv"  ;  }


main_cpu_check  ()  {    #  ----------------------------------  main_cpu_check
  local  cpu="$(  uname  -m  )"
  [ "$cpu" = 'x86_64' ]  &&  return
  die  "vland  error  unsupported cpu type  '$machine'"  ;  }


main_download  ()  {    #  ------------------------------------  main_download
  #  usage:  main_download  --download  distro
  case  "$2"  in
    ( alpine      )  alpine_download       ;  alpine_verify       ;;
    ( arch        )  arch_download         ;  arch_verify         ;;
    ( ubuntu-2110 )  ubuntu_2110_download  ;  ubuntu_2110_verify  ;;
    ( void        )  void_download         ;  void_verify         ;;
    ( void-musl   )  void_musl_download    ;  void_musl_verify    ;;
    ( * )  die  "vland  error  download unsupported  '$2'"  ;;
   esac  }


main_list  ()  {    #  --------------------------------------------  main_list
  #  usage:  main_list
  echo
  echo  'main_list'
  echo  "  vland_dir  '$vland_dir'"
  return  ;  }


main_status  ()  {    #  ----------------------------------------  main_status

  help_common

  echo
  echo  'available overlays'
  if  [ -d "$vland_dir/overlay" ]
    then  ls  "$vland_dir/overlay"
    else  echo  "(none)"  ;  fi  }


main_version  ()  {    #  --------------------------------------  main_version
  echo  "vland  version  $VLAND_VERSION"  ;  }


#  create  -----------------------------------------------------------  create


create_init  ()  {    #  ----------------------------------------  create_init
  #  usage:  create_init  --create  distro  [land]  [overlay]
  distro="$2"
  guest_name="${3:-$distro}"
  overlay_name="${4:-$guest_name}"
  guest="$vland_dir/guest/$guest_name"
  overlay="$vland_dir/overlay/$overlay_name"
  overlay_home="$overlay/${HOME#/}"  ;  }


create_userland  ()  {    #  --------------------------------  create_userland
  #  usage:  create_userland
  case  "$distro"  in
    ( alpine      )  alpine_create       ;  return  ;;
    ( arch        )  arch_create         ;  return  ;;
    ( ubuntu-2110 )  ubuntu_2110_create  ;  return  ;;
    ( void        )  void_create         ;  return  ;;
    ( void-musl   )  void_musl_create    ;  return  ;;
    esac
  die  "vland  error  unsupported distro  '$distro'"  ;  }


create_overlay  ()  {    #  ----------------------------------  create_overlay
  #  usage:  create_overlay
  echo  'create_overlay'
  [ -d "$overlay" ]  &&  return
  trace_mkdir_p  "$overlay"  ;  }


create  ()  {    #  --------------------------------------------------  create
  #  usage:  create  --create  distro  [land]  [overlay]
  create_init  "$@"
  create_overlay
  create_userland
  echo  ;  echo  "vland  done  '$*'"  ;  }


#  lxr & main_launch  -------------------------------------  lxr & main_launch


lxr_init_land  ()  {    #  ------------------------------------  lxr_init_land
  #  usage:  launch_init_land
  [ -d "$guest" ]  ||  die  "vland  error  userland not found  '$guest_name'"
  #  todo  add $USER to /etc/passwd
  return  ;  }


lxr_init_over  ()  {    #  ------------------------------------  lxr_init_over
  #  usage:  launch_init_over
  [ -d "$overlay" ]  ||
    die  "vland  error  overlay not found  '$overlay_name'"
  #  20211221  todo  read $HOME from $guest/etc/passwd
  #  20211227  todo  add  $USER to   $guest/etc/passwd
  mkdir  -p  "$overlay_home"
  mkdir  -p  "$overlay/root"
  mkdir  -p  "$overlay/tmp/.X11-unix"
  return  ;  }


lxr_xauth_copy  ()  {    #  ----------------------------------  lxr_xauth_copy
  #  usage:  lxr_xauth_copy
  local  src="$HOME/.Xauthority"  dst="$overlay_home/.Xauthority"
  [ -f "$src" ]  ||  return  0
  cmp  --silent  "$src"  "$dst"  &&  return
  trace  cp  "$src"  "$dst"  ;  }


lxr_xauth  ()  {    #  ---------------------------------------------  lxr_auth
  #  usage:  lxr_preapre  [option ...]  [-- command [arg ...]]
  while  [ "$1" ]  ;  do
    case  "$1"  in
      ( --    )  return          ;;
      ( --x11 )  lxr_xauth_copy  ;;
      ( --*   )  ;;    #  skip
      ( -*x*  )  lxr_xauth_copy  ;;
      esac
    shift  ;  done  ;  }


lxr_prepare  ()  {    #  ----------------------------------------  lxr_prepare
  #  usage:  lxr_preapre  [option ...]  [-- command [arg ...]]
  lxr_init_over
  lxr_init_land
  lxr_xauth  "$@"
  lxroot_install  ;  }


lxr  ()  {    #  --------------------------------------------------------  lxr
  #  usage:  lxr_exec  [option ...]  [-- command [arg ...]]
  lxr_prepare  "$@"  ;  "$lxroot"  "$guest"  "$overlay"  "$@"  ;  }


lxr_exec  ()  {    #  ----------------------------------------------  lxr_exec
  #  usage:  lxr_exec  [option ...]  [-- command [arg ...]]
  lxr_prepare  "$@"  ;  exec  "$lxroot"  "$guest"  "$overlay"  "$@"  ;  }


main_launch_shift  ()  {    #  ----------------------------  main_launch_shift
  #  usage:  launch_shift  "$1"
  case  "$1"  in
    ( -* | '' )  return  1  ;;    #  don't discard these
    esac  ;  }                    #  discard everything else


main_launch  ()  {    #  ----------------------------------------  main_launch
  #  usage:  main_launch  over  [land]  [option ...]  [-- command ...]
  overlay_parse  "$@"
  main_launch_shift  "$1"  &&  shift    #  discard  over
  main_launch_shift  "$1"  &&  shift    #  discard  land
  lxr_exec  "$@"  ;  }


#  lib  -----------------------------------------------------------------  lib


aria2c_install  ()  {    #  ----------------------------------  aria2c_install

  #  usage:  aria2c_install

  [ "$aria2c" ]  &&  return

  [ "$( which2 aria2c )" ]  &&  {  readonly  aria2c='aria2c'  ;  return  ;  }

  echo  ;  echo  'aria2c_install'

  local  url_base='https://github.com/parke/aria2.sh/releases/download/0.21.0'
  local  url="$url_base/aria2c-x86_64-20211228.txz"
  local  path="$vland_dir/dist/aria2/${url##*/}"
  local  sha='74272ef1b7cbccbcdf82aeda7464b2ffff9241cb18c06121263c3126b61e4810'
  local  b2='7be265a672873c5f4f164a3da8c003eea5c5c3006f70ec5fbb0d8a2fb4d028fe'
  local  bin_dir="$vland_dir/dist/bin"

  lib_download  "$url"  "$path"
  lib_verify    "$path"  "$sha"    sha256sum
  lib_verify    "$path"  "$b2"     b2sum  -l 256

  #  20220112  todo
  #  echo  ;  trace  which2  xz  ||  true
  #  echo  ;  echo  "path  '$PATH'"
  #  echo  ;  trace  md5sum  /usr/bin/tar
  #  echo  ;  trace  tar  --version
  #  echo

  trace_mkdir_p  "$bin_dir"
  trace  tar  xJf  "$path"  -C "$bin_dir"

  local  sha='85c2cd2eff637fbd7eecdd438ccd1b1053660e052d41a3055dceb703d92c4dba'
  local  b2='43c93739d17431e7eaebcc0f0dc9b725acccef5e03cfca2923a3631c81a43649'

  readonly  aria2c="$bin_dir/aria2c-x86_64"

  lib_verify  "$aria2c"  "$sha"    sha256sum
  lib_verify  "$aria2c"  "$b2"     b2sum  -l 256  ;  }


cmp  ()  {    #  --------------------------------------------------------  cmp
  #  usage:  cmp  [--silent]  file1  file2
  #  busybox cmp lacks '--silent' but has '-s'
  [ "$1" = '--silent' ]  &&  {  command  cmp  -s  "$2"  "$3"  ;  return  ;  }
  command  cmp  "$@"  ;  }


die  ()  {    #  --------------------------------------------------------  die
  1>&2  echo  "$*"  ;  exit  1  ;  }


distro_detect  ()  {    #  ------------------------------------  distro_detect
  #  usage:  distro_detect
  if  [ -e "$guest"/etc/os-release ]  ;  then
    local  line
    while  read  line  ;  do
      [ "$distro" ]  &&  break
      case  "$line"  in
        ( ID=alpine                     )  distro='alpine'  ;;
        ( ID=arch                       )  distro='arch'    ;;
        ( ID=void | ID=[\'\"]void[\'\"] )  distro='void'    ;;  esac
      done  <  "$guest"/etc/os-release  ;  fi  ;  }


distro_unsupported  ()  {    #  --------------------------  distro_unsupported
  echo  ;  echo  "vland  distro not supported  '$1'"  ;  exit  1  ;  }


lib_download  ()  {    #  --------------------------------------  lib_download
  #  usage:  lib_download  url  path
  local  url="$1"  path="$2"
  [ -e "$path" ]  &&  return
  trace_mkdir_p_dirname  "$path"
  trace  wget  --no-clobber  "$url"  -O "$path"  ;  }


lib_download_grep_aria  ()  {    #  ------------------  lib_download_grep_aria

  #  usage:  lib_download_grep_aria

  local  line  prev
  while  read  line  ;  do
    case  "$line"  in

      ('');;
      ("$prev");;
      ('FILE: '*);;
      ('========'*);;
      ('--------'*);;
      (*' - Redirecting to '*);;
      (*' - Download aborted. URI='*);;
      ('Exception: [AbstractCommand.cc:'*);;
      ('*** Download Progress Summary as of '*);;
      ('-> [HttpResponse.cc:'*'] errorCode='*' Invalid range header. '*);;
      ('-> [SocketCore.cc:'*'] errorCode='*' SSL/TLS handshake failure: '*);;
      ('-> [HttpSkipResponseCommand.cc:'*'] errorCode=3 Resource not found');;

      (*)  echo  "$line"  ;  prev="$line"  ;;  esac  ;  done  }


lib_download_multi  ()  {    #  --------------------------  lib_download_multi

  #  usage:  lib_download_multi  seeds  src_path  dest_path

  local  seeds="$1"  src_path="$2"  dest_path="$3"

  [ -e "$dest_path" ]  &&  return

  aria2c_install

  local  dest_dir="${dest_path%/*}"  seed
  trace_mkdir_p  "$dest_dir"

  local  urls="$(
    for  seed  in  $seeds  ;  do  echo  "$seed/$src_path"  ;  done  )"

  echo  ;  echo  "lib_download_multi  seeds(${#seeds})  $src_path  ..."

  "$aria2c"  --dir="$dest_dir"  --split=40  --min-split-size=1M  \
      --summary-interval=1  $urls  |  lib_download_grep_aria  ;  }


lib_verify  ()  {    #  ------------------------------------------  lib_verify

  #  usage:  lib_verify  [-v]  path  expect  algo  [opts]

  local  verbose=''
  if  [ "$1" = '-v' ]  ;  then  verbose=1  ;  shift  ;  fi
  local  path="$1"  expect="$2"  algo="$3"  ;  shift  3

  if  [ ! -x "$( which2 "$algo" )" ]  ;  then
    case  "$algo"  in  ( b2sum | sha3sum )  return  ;;  esac
    echo  "vland  error  lib_verify  algo not found  '$algo'"
    exit  1  ;  fi

  if  [ "$verbose" = '1' ]  ;  then  echo  "$algo  $path"  ;  fi
  local  actual
  actual=`  "$algo"  "$@"  "$path"  `
  actual="${actual%% *}"

  if  [ ! "$actual" = "$expect" ]  ||  [ "$verbose" = '1' ]  ;  then
    local  realpath="$(  realpath  "$path"  )"
    echo  "verify    $algo  $path"
    echo  "  expect  $expect"
    echo  "  actual  $actual"
    #  busybox stat lacks '--dereference'
    #  busybox stat lacks '--format' but has '-c'
    echo  "  size    $(  stat  -c '%s'  "$realpath"  )"
    fi

  if  [ "$actual" = "$expect" ]  ;  then  return  ;  fi
  echo  "verify  failed  exiting..."
  exit  1  ;  }


lxroot_install  ()  {    #  ----------------------------------  lxroot_install

  #  usage:  lxroot_install

  [ "$lxroot" ]  &&  return

  [ "$( which2 lxroot )" ]  &&  {  readonly  lxroot='lxroot'  ;  return  ;  }

  local  lxr_ver='0.22.0'
  local  url_base='https://github.com/parke/lxroot/releases/download'
  local  url="$url_base/$lxr_ver/lxroot-x86"
  local  path="$vland_dir/dist/bin/lxroot-x86"
  local  md5='04821ce1b8a69b8a26b6f9f39c3faa17'
  local  sha='b29ecc05c6b1fb1f525b8687567820ce28a4eea7fb0b187d9e4927c0de4590e5'
  local  sha3='e45d01daae157ff65110872790618168a2b9391897e6021043f0471c'
  local  b2='7acf5a46d81cd72db2e6bf88e3199fe5d5a9503409990757a8cf678fedb83a77'

  lib_download  "$url"  "$path"
  lib_verify    "$path"  "$md5"   md5sum
  lib_verify    "$path"  "$sha"   sha256sum
  lib_verify    "$path"  "$sha3"  sha3sum
  lib_verify    "$path"  "$b2"    b2sum  -l 256

  chmod  +x  "$path"
  readonly  lxroot="$path"
  return  ;  }


mute  ()  {    #  ------------------------------------------------------  mute
  "$@"  >/dev/null  2>/dev/null  &&  return
  local  status="$?"
  echo  "mute  error  $status  '$*'"  1>&2
  return  "$status"  ;  }


overlay_parse  ()  {    #  ------------------------------------  overlay_parse

  #  usage:  overlay_parse  overlay  [userland]

  case  "$1"  in
    ( '' | -* )  die  "vland  error  invalid overlay  '$1'"  ;;
    ( *       )  overlay_name="$1"  ;;
    esac

  case  "$2"  in
    ( '' | -* )  guest_name="$overlay_name"  ;;
    ( *       )  guest_name="$2"  ;;
    esac

  [ "$vland_dir" ]  ||  die  "vland  internal error  vland_dir not set"

  overlay="$vland_dir/overlay/$overlay_name"
  guest="$vland_dir/guest/$guest_name"
  overlay_home="$overlay/${HOME#/}"    #  a potentially unsafe assumption

  [ -f "$overlay"/vland.conf ]  &&  .  "$overlay"/vland.conf
  distro_detect  ;  }


pinwheel  ()  {    #  ----------------------------------------------  pinwheel
  local  line  n='0'
  echo  -n  '/ '
  while  read  line  ;  do
    case  "$n"  in
      ('0')  echo  -n  '\b\b- '  ;;
      ('1')  echo  -n  '\b\b\ '  ;;
      ('2')  echo  -n  '\b\b| '  ;;
      ('3')  echo  -n  '\b\b/ '  ;;
      (*)    echo  -n  '\b\bE '  ;;
      esac
    n="$(( ( n + 1 ) % 4 ))"
    done
  return  ;  }


resolv_conf_sync  ()  {    #  ------------------------------  resolv_conf_sync
  #  usage:  resolv_conf_sync  path/to/userland/etc/resolv.conf
  if  [ -h "$1" ]  ;  then  trace  rm  "$1"  ;  fi
  if  cmp  --silent  /etc/resolv.conf  "$1"  ;  then  return  ;  fi
  trace  cp  /etc/resolv.conf  "$1"  ;  }


techo  ()  {    #  ----------------------------------------------------  techo
  echo  "$@"  ;  }    #  temporary echo, for use only during development


trace  ()  {    #  ----------------------------------------------------  trace
  echo  "+  $*"  1>&2  ;  "$@"  ;  }


trace_mkdir_p  ()  {    #  ------------------------------------  trace_mkdir_p
  #  usage:  trace_mkdir_p  path
  [ -d "$1" ]  &&  return
  trace  mkdir  -p  "$1"  ;  }


trace_mkdir_p_dirname  ()  {    #  --------------------  trace_mkdir_p_dirname
  #  usage:  trace_mkdir_p_dirname
  trace_mkdir_p  "${1%/*}"  ;  }


vland  ()  {    #  ----------------------------------------------------  vland
  [ -x "$VLAND_EXE" ]  &&  {  "$VLAND_EXE"  "$@"  ;  return  ;  }
  /bin/sh  "$VLAND_EXE"  "$@"  ;  }


which2  ()  {    #  --------------------------------------------------  which2
  #  usage:  which2  command
  local  path="$PATH"
  while  [ "$path" ]  ;  do
    local  dir="${path%%:*}"
    [ -x "$dir/$1" ]  &&  {  echo  "$dir/$1"  ;  return  ;  }
    [ "$dir" = "$path" ]  &&  return  1
    path="${path#*:}"  ;  done
  return  1  ;  }


xray  ()  {    #  ------------------------------------------------------  xray

  #  usage:  xray  function_name  [arg ...]

  echo  "xray  $1"  ;  [ "$1" ]  &&  shift
  echo  "  args   args          '$*'  $#"
  echo  "  names  overlay_name  '$overlay_name'"
  echo  "         guest_name    '$guest_name'"
  echo  "         distro        '$distro'"
  echo  "  paths  vland_dir     '$vland_dir'"
  echo  "         overlay       '$overlay'"
  echo  "         overlay_home  '$overlay_home'"
  echo  "         guest         '$guest'"
  echo  "         dist_path     '$dist_path'"
  echo  "  real   vland_dir     '$(  realpath  -q  "$vland_dir"  )'"
  echo  "         overlay       '$(  realpath  -q  "$overlay"       )'"
  echo  "         guest         '$(  realpath  -q  "$guest"       )'"  ;  }


#  pkg  -----------------------------------------------------------------  pkg


pkg_aur  ()  {    #  ------------------------------------------------  pkg_aur
  case  "$distro"  in
    ( arch )  distro='arch_aur'  ;;
    ( *    )  die  "vland --aur  invalid distro  '$distro'"  ;;  esac  }


pkg_parse  ()  {    #  --------------------------------------------  pkg_parse

  case  "$#"  in
    (1)  die  "vland --pkg  invalid overlay  ''"  ;;
    (2)  die  "vland --pkg  invalid action  ''"  ;;  esac

  case  "$4"  in
    ( update | install | deps | build | build_install )
      overlay_parse  "$2"  "$3"  ;  action="$4"  shift='4'  ;;
    ( * )
      overlay_parse  "$2"        ;  action="$3"  shift='3'  ;;
    esac

  [ "$distro" = 'void-musl'     ]  &&  distro='void'
  [ "$action" = 'build-install' ]  &&  action='build_install'

  [ "$1" = '--aur' ]  &&  pkg_aur  ;  return  0  ;  }


pkg_sanity  ()  {    #  ------------------------------------------  pkg_sanity

  [ -d "$overlay" ]  ||  die  "vland --pkg  overlay not found  '$overlay_name'"
  [ -d "$guest"   ]  ||  die  "vland --pkg  guest not found  '$guest_name'"

  case  "$distro"  in
    ( alpine | arch | arch_aur | void )  ;;
    ( * )  die  "vland --pkg  invalid distro  '$distro'"  ;;  esac

  case  "$action"  in
    ( update | install | upgrade | deps | build | build_install )  ;;
    ( * )  die  "vland --pkg  invalid action  '$action'"  ;;  esac  ;  }


pkg_prelude  ()  {    #  ----------------------------------------  pkg_prelude
  case  "$distro"  in  ( alpine | arch | arch_aur | void | void_musl )
    #  case  "$action"  in  ( update | install | deps | build | build_install )
    #    pkg_try  "$distro"_pkg_prepare  ;;  esac
    case  "$action"  in  ( update )
      "$distro"_pkg_update  ;;  esac
    case  "$action"  in  ( deps | build | build_install )
      "$distro"_pkg_build_prepare  ;;  esac  ;;  esac  ;  }


pkg_packages  ()  {    #  --------------------------------------  pkg_packages
  #  usage:  pkg  --pkg  overlay  [guest]  action  [--]  package
  shift  "$shift"  ;  [ "$1" = '--' ]  &&  shift
  ###  echo  "pkg_packages  '$*'"
  case  "$distro"  in  ( alpine | arch | arch_aur | void | void_musl )
    while  [ "$1" ]  ;  do
      local  pkg="$1"  ;  shift
      case  "$action"  in  ( install )
        "$distro"_pkg_install  "$pkg"  ;;  esac
      case  "$action"  in  ( deps | build | build_install )
        "$distro"_pkg_deps  "$pkg"  ;;  esac
      case  "$action"  in  ( build | build_install )
        "$distro"_pkg_build  "$pkg"  ;;  esac
      case  "$action"  in  ( build_install )
        "$distro"_pkg_build_install  "$pkg"  ;;  esac
      done  ;  esac  ;  }


pkg  ()  {    #  --------------------------------------------------------  pkg
  #  usage:  pkg  --pkg  overlay  [guest]  action  [--]  package
  [ "$distro" ]  &&  die  "pkg  internal error  distro  '$distro'"
  local  action  shift
  pkg_parse     "$@"
  pkg_sanity
  pkg_prelude   "$@"
  pkg_packages  "$@"  ;  }




#  distro  ===========================================================  distro




#  alpine  -----------------------------------------------------------  alpine


alpine_vars_set  ()  {    #  --------------------------------  alpine_vars_set

  #  usage:  alpine_vars_set

  tgz_ver='3.15.0'
  tgz_url="https://dl-cdn.alpinelinux.org/alpine/v${tgz_ver%.*}"
  tgz_url="$tgz_url/releases/x86_64/alpine-minirootfs-${tgz_ver}-x86_64.tar.gz"
  tgz="${tgz_url##*/}"

  tgz_sha256='ec7ec80a96500f13c189a6125f2dbe8600ef593b87fc4670fe959dc02db727a2'
  tgz_b2='a67c1a7c7307534345946211f44a4e0bb5278b8eaccc1a2d3aa9f96b992da8f1'

  dist_path="$vland_dir/dist/alpine/${tgz}"  ;  }


alpine_download  ()  {    #  --------------------------------  alpine_download
  #  usage:  alpine_download
  [ -e "$dist_path" ]  &&  return
  echo  ;  echo  'alpine_download'
  alpine_vars_set
  lib_download  "$tgz_url"  "$dist_path"  ;  }


alpine_verify  ()  {    #  ------------------------------------  alpine_verify
  #  usage:  alpine_verify
  echo  ;  echo  "alpine_verify  $dist_path"
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256
  echo  'alpine_verify  done'  ;  }


alpine_extract  ()  {    #  ----------------------------------  alpine_extract
  #  usage:  alpine_extract
  [ -e "$guest" ]  &&
    die  "vland  error  userland already exists  '$guest'"
  alpine_download
  alpine_verify
  echo  ;  echo  'alpine_extract'
  trace  mkdir  -p  "$guest"
  trace  tar  xzf "$dist_path"  -C "$guest"  ;  }


alpine_configure  ()  {    #  ------------------------------  alpine_configure
  trace  resolv_conf_sync  "$guest"/etc/resolv.conf
  return  ;  }


alpine_create  ()  {    #  ------------------------------------  alpine_create
  #  usage:  alpine_create
  alpine_vars_set
  alpine_extract
  alpine_configure
  echo  ;  echo  'vland  alpine_create  done'  ;  }


#  alpine_build  -----------------------------------------------  alpine_build


alpine_pkg_prepare_aports  ()  {    #  ------------  alpine_pkg_prepare_aports

  #  usage:  self

  local  url='https://gitlab.alpinelinux.org/alpine/aports/-/archive/master'
  local  url="$url/aports-master.tar.bz2"

  local  tbz="${url##*/}"
  local  tbz_path="$overlay_home/$tbz"
  local  aports="$overlay_home/aports"

  [ -e "$tbz_path" ]  &&  echo  "alpine_build  found  '$tbz_path'"
  lib_download  "$url"  "$tbz_path"

  if  [ -e "$overlay_home"/aports ]
    then  echo  "alpine_build  found  '$overlay_home/aports'"
    else  trace  tar  xjf "$tbz_path"  -C "$overlay_home"
          trace  mv  "$overlay_home"/aports-master  "$overlay_home"/aports
          fi  ;  }


alpine_pkg_prepare_keygen  ()  {    #  ------------  alpine_pkg_prepare_keygen
  #  usage:  self
  local  conf="$overlay/$HOME"/.abuild/abuild.conf
  [ -e "$conf" ]  &&  {  echo  "alpine_build  found  '$conf'"  ;  return  ;  }
  vland  "$overlay_name"  "$guest_name"  --  abuild-keygen  --append  -n
  trace  cp  "$overlay/$HOME"/.abuild/*.rsa.pub  "$guest"/etc/apk/keys/  ;  }


alpine_pkg_prepare_sdk  ()  {    #  ------------------  alpine_pkg_prepare_sdk
  #  usage:  self
  local  abuild_path="$guest/usr/bin/abuild"
  if  [ -e "$abuild_path" ]
    then  echo  "alpine_build  found  '$abuild_path'"
    else  trace  lxr  -nr  --  apk  update
          trace  lxr  -nr  --  apk  add  alpine-sdk  ;  fi
  #  redirect symlinks to remove abuild privilege escalation
  ln  -sf  '/usr/sbin/addgroup'  "$guest/usr/bin/abuild-addgroup"
  ln  -sf  '/usr/sbin/adduser'   "$guest/usr/bin/abuild-adduser"
  ln  -sf  '/sbin/apk'           "$guest/usr/bin/abuild-apk"  ;  }


alpine_pkg_update  ()  {    #  ----------------------------  alpine_pkg_update
  lxr  -nr  --  apk  update  ;  }


alpine_pkg_install  ()  {    #  --------------------------  alpine_pkg_install
  #  usage:  alpine_pkg_install  package_name
  lxr  -nr  --  apk  add  "$1"  ;  }


alpine_pkg_build_prepare  ()  {    #  --------------  alpine_pkg_build_prepare
  alpine_pkg_prepare_sdk
  alpine_pkg_prepare_keygen
  alpine_pkg_prepare_aports  ;  }


alpine_pkg_port_find  ()  {    #  ----------------------  alpine_pkg_port_find
  #  usage:  alpine_pkg_port_find  package_name
  local  pwd="$PWD"
  cd  "$overlay_home"
  ls  -d  aports/*/"$1"  2>/dev/null
  cd  "$pwd"  ;  }


alpine_pkg_deps  ()  {    #  --------------------------------  alpine_pkg_deps
  #  usage:  alpine_pkg_deps  package_name
  local  port="$(  alpine_pkg_port_find  "$1"  )"
  [ -z "$port" ]  &&  die  "vland --pkg  package not found  '$1'"
  trace  lxr  -nw  cd "$port"  --  abuild  deps  ;  }


alpine_pkg_build  ()  {    #  ------------------------------  alpine_pkg_build
  #  usage:  alpine_pkg_build  package_name
  local  port="$(  alpine_pkg_port_find  "$1"  )"
  [ -z "$port" ]  &&  die  "vland --pkg  package not found  '$1'"
  trace  lxr  -nw  cd "$port"  --  abuild  fetch
  trace  lxr  wd /var/cache/distfiles  cd "$port"  --  abuild  ;  }


alpine_pkg_find  ()  {    #  --------------------------------  alpine_pkg_find
  #  usage:  alpine_pkg_port_find  package_name
  local  pwd="$PWD"
  cd  "$overlay_home"
  find  packages  -name  "$1"'-*.apk'
  cd  "$pwd"  ;  }


alpine_pkg_build_install  ()  {    #  --------------  alpine_pkg_build_install
  #  usage:  alpine_pkg_build  package_name
  local  pkgs="$(  alpine_pkg_find  "$1"  )"
  trace  lxr  -r  cd "$HOME"  --  apk  --force-non-repository  add  $pkgs  ;  }


#  arch  ---------------------------------------------------------------  arch


arch_vars_set  ()  {    #  ------------------------------------  arch_vars_set

  tgz_ver='2022.01.01'
  tgz_md5='b26943a2201ed75f53faf574c811ec94'
  tgz_sha1='e7befc6a9d8884f3380214ccee96bf13200db24e'
  tgz_b2='f008b627caeb7f030a84ee79ae80fb2c82fe328beed8273e3ec7a48d4cb861ed'

  tgz="archlinux-bootstrap-${tgz_ver}-x86_64.tar.gz"
  dist_path="$vland_dir/dist/arch/$tgz"
  mirror='https://mirror.sfo12.us.leaseweb.net'
  mirror="Server = ${mirror}/archlinux/\$repo/os/\$arch"

  return  ;  }


arch_download  ()  {    #  ------------------------------------  arch_download
  #  usage:  arch_download
  arch_vars_set
  echo  ;  echo  "arch_download  $dist_path"
  lib_download_multi  "$arch_web_seeds"  "$tgz_ver/$tgz"  "$dist_path"
  echo  "arch_download  done"  ;  }


arch_verify  ()  {    #  ----------------------------------------  arch_verify
  #  usage:  arch_verify
  arch_vars_set
  echo  ;  echo  "arch_verify  $dist_path"
  lib_verify  "$dist_path"  "$tgz_md5"     md5sum
  lib_verify  "$dist_path"  "$tgz_sha1"    sha1sum
  lib_verify  "$dist_path"  "$tgz_b2"      b2sum  -l 256
  echo  'arch_verify  done'  ;  }


arch_tar_failed  ()  {    #  --------------------------------  arch_tar_failed
  echo  ;  echo  'vland  error in arch_extract'
  local  tar="$(  readlink  $(  which2  tar  )  )"
  echo
  echo    '/==========================================================\'
  echo    '|                                                          |'
  echo    '|  vland  error                                            |'
  echo    '|                                                          |'
  echo    "|  'tar xzf'  failed in arch_extract.                      |"
  case  "$tar"  in  ( */busybox )
  echo    '|                                                          |'
  echo    '|  busybox tar detected.                                   |'
    echo  '|  arch_extract requires features that busybox tar lacks.  |'
    echo  "|  please install the 'tar' package and try again.         |"
    esac
  echo    '|                                                          |'
  echo    '\==========================================================/'
  echo
  trace  rmdir  "$guest"
  exit  1  ;  }


arch_extract  ()  {    #  --------------------------------------  arch_extract

  #  usage:  arch_extract

  [ -e "$guest" ]  &&
    die  "vland  error  userland already exists  '$guest'"

  arch_download
  arch_verify

  echo  ;  echo  'arch_extract'
  trace  mkdir  -p  "$guest"
  local  opts='--delay-directory-restore  --strip-components=1'
  trace  tar  xzf "$dist_path"  -C "$guest"  $opts  ||  arch_tar_failed
  trace  chmod  u+w  "$guest/etc/ca-certificates/extracted/cadir"
  echo  'arch_extract  done'

  return  ;  }


arch_configure  ()  {    #  ----------------------------------  arch_configure

  #  usage:  arch_configure

  lxroot_install

  echo  ;  echo  'arch_configure  ...'  ;  echo

  #  20211219  todo  copy localtime from host rather than using Los_Angeles?

  trace  resolv_conf_sync  "$guest"/etc/resolv.conf
  trace  ln  -snf  /usr/share/zoneinfo/America/Los_Angeles  \
    "$guest"/etc/localtime

  echo  "$mirror"  \
    |  trace  dd  of="$guest"/etc/pacman.d/mirrorlist  status=none

  echo  ;  trace  lxr  -nr  --  pacman-key  --init
  echo  ;  trace  lxr  -nr  --  pacman-key  --populate  archlinux

  echo  ;  echo  'arch_configure  done'  ;  }


arch_create  ()  {    #  ----------------------------------------  arch_create
  #  usage:  arch_create
  echo  ;  echo  'arch_create'
  arch_vars_set
  arch_extract
  arch_configure
  echo  ;  echo  'arch_create  done'  ;  }


#  arch_pkg  -------------------------------------------------------  arch_pkg


arch_pkg_find  ()  {    #  ------------------------------------  arch_pkg_find
  #  usage:  arch_pkg_find  package_name
  local  cwd="$PWD"
  cd  "$overlay_home"/vland-build/"$1"/trunk
  ls  *.pkg.tar.zst
  cd  "$cwd"  ;  }


arch_pkg_makepkg_conf  ()  {    #  --------------------  arch_pkg_makepkg_conf
  local  conf="$overlay_home"/.makepkg.conf
  [ -e "$conf" ]  ||  echo  'PACMAN_AUTH=(  unshare  -r  )'  >  "$conf"  ;  }


arch_pkg_pacman_S  ()  {    #  ----------------------------  arch_pkg_pacman_S
  local  asp="$guest"/usr/bin/asp
  # -e "$asp" ]  &&  echo  "arch_build  found  '$asp'"
  [ -e "$asp" ]  &&  return
  trace  lxr  -nr  --  pacman  -Sy  --noconfirm  base-devel  asp  ;  }


arch_pkg_update  ()  {    #  --------------------------------  arch_pkg_update
  trace  lxr  -nr  --  pacman  -Sy  ;  }


arch_pkg_install  ()  {    #  ------------------------------  arch_pkg_install
  trace  lxr  -nr  --  pacman  -Sy  --noconfirm  "$1"  ;  }


arch_pkg_build_prepare  ()  {    #  ------------------  arch_pkg_build_prepare
  arch_pkg_makepkg_conf
  arch_pkg_pacman_S  ;  }


arch_pkg_deps  ()  {    #  ------------------------------------  arch_pkg_deps
  #  usage:  arch_pkg_deps  package_name
  trace  lxr  --  mkdir  -p  vland-build
  [ -e "$overlay_home"/vland-build/"$1" ]  ||
    trace  lxr  -n   cd vland-build  --  asp  checkout  "$1"
  trace  lxr  -nw  cd vland-build/"$1"/trunk  \
    --  makepkg  --noconfirm  --syncdeps  --noextract  --nobuild  ;  }


arch_pkg_build  ()  {    #  ----------------------------------  arch_pkg_build
  #  usage:  arch_pkg_build_one  package_name
  [ "$(  arch_pkg_find  "$1"  )" ]  &&  {
    echo  ;  echo  "vland  found package(s) for '$1'"
    echo  ;  trace  ls  -lh  "$overlay_home"/vland-build/"$1"/trunk/
    echo  ;  return  ;  }
  trace  lxr  -n  cd vland-build/"$1"/trunk  --  makepkg  --skippgpcheck  ;  }


arch_pkg_build_install  ()  {    #  ------------------  arch_pkg_build_install
  #  usage:  arch_pkg_build_install  package_name
  local  pkgs="$(  arch_pkg_find  "$1"  )"
  [ -z  "$pkgs" ]  &&  {
    echo  'arch_build_install_package  strange, no packages found'
    return  ;  }
  trace  lxr  -r  cd "$HOME"/vland-build/"$1"/trunk  \
    --  pacman  -U  --noconfirm  $pkgs  ;  }


#  arch_aur_pkg  -----------------------------------------------  arch_aur_pkg


arch_aur_find  ()  {    #  ------------------------------------  arch_aur_find
  #  usage:  arch_aur_find  package_name
  #  20220107  perhaps use 'find' instead of 'ls' ?
  local  cwd="$PWD"  dir="$overlay_home"/vland-build/"$1"
  [ -d "$dir" ]  ||  return
  cd  "$dir"  ;  ls  *.pkg.tar.zst  ;  cd  "$cwd"  ;  }


arch_aur_pkg_build_prepare  ()  {    #  ----------  arch_aur_pkg_build_prepare
  arch_pkg_build_prepare  ;  }


arch_aur_pkg_deps  ()  {    #  ----------------------------  arch_aur_pkg_deps

  #  usage:  arch_aur_pkg_deps  package_name

  local  url='https://aur.archlinux.org/cgit/aur.git/snapshot'
  local  url="${url}/${1}.tar.gz"
  local  dir="$overlay_home"/vland-build
  local  dst="$dir/${url##*/}"

  [ -e "$dst" ]  ||
    trace  curl  --location  --create-dirs  --output "$dst"  "$url"

  [ -d "$dir/$1" ]  ||  trace  tar  xzf "$dst"  -C "$dir"

  trace  lxr  -nw  cd vland-build/"$1"  \
    --  makepkg  --noconfirm  --syncdeps  --noextract  --nobuild  ;  }


arch_aur_pkg_build  ()  {    #  --------------------------  arch_aur_pkg_build
  #  usage:  arch_aur_pkg_build  package_name
  [ "$(  arch_aur_find  "$1"  )" ]  &&  {
    echo  "arch_aur_build_one  package(s) found for '$1'"  ;  return  ;  }
  trace  lxr  -n  cd vland-build/"$1"  --  makepkg  --skippgpcheck  ;  }


arch_aur_pkg_build_install  ()  {    #  ----------  arch_aur_pkg_build_install
  #  usage:  arch_aur_pkg_build_install  package_name
  local  pkgs="$(  arch_aur_find  "$1"  )"
  [ -z  "$pkgs" ]  &&  {
    echo  'arch_aur_build_install_one  strange, no packages found'
    return  ;  }
  trace  lxr  -r  cd "$HOME"/vland-build/"$1"  \
    --  pacman  -U  --noconfirm  $pkgs  ;  }


#  ubuntu_2110  -------------------------------------------------  ubuntu_2110


ubuntu_2110_vars_set  ()  {    #  ----------------------  ubuntu_2110_vars_set

  #  usage:  ubuntu_2110_vars_set

  tor_url='https://releases.ubuntu.com/'
  tor_url="$tor_url/21.10/ubuntu-21.10-desktop-amd64.iso.torrent"
  tor_info='Info Hash: f1fcdc1462d36530f526c1d9402eec9100b7ba18'
  tor_length='Total Length: 2.9GiB (3,116,482,560)'

  iso='ubuntu-21.10-desktop-amd64.iso'
  iso_sha='f8d3ab0faeaecb5d26628ae1aa21c9a13e0a242c381aa08157db8624d574b830'
  iso_b2='ed8b2eb4e061ed41f1699d5831468aba8e3029f1c59b8c9d502b24b08352797e'

  tor_path="$vland_dir"/dist/ubuntu/"${tor_url##*/}"
  iso_path="$vland_dir"/dist/ubuntu/"$iso"

  return  ;  }


ubuntu_2110_download  ()  {    #  ----------------------  ubuntu_2110_download
  #  usage:  ubuntu_2110_download
  ubuntu_2110_vars_set
  [ -e "$iso_path" ]  &&  return
  lib_download  "$tor_url"   "$tor_path"

  local  show="$(    aria2c  -S  "$tor_path"  )"
  local  info="$(    echo  "$show"  |  egrep  '^Info Hash: '     )"
  local  length="$(  echo  "$show"  |  egrep  '^Total Length: '  )"
  local  name="$(    echo  "$show"  |  egrep  '^Name: '          )"

  echo
  echo  "info    '$info'"
  echo  "length  '$length'"
  echo  "name    '$name'"

  [ "$info"   = "$tor_info"   ]  ||  die  "ubuntu_2110   bad info"
  [ "$length" = "$tor_length" ]  ||  die  "ubuntu_2110   bad length"
  [ "${name#Name: }" = "$iso" ]  ||  die  "ubuntu_2110   bad name"

  local  dir="$vland_dir"/dist/ubuntu
  trace  aria2c  -d "$dir"   "$tor_path"

  return  ;  }


ubuntu_2110_verify  ()  {    #  --------------------------  ubuntu_2110_verify
  #  usage:  ubuntu_2110_verify
  echo  ;  echo  'void_verify'
  void_vars_set
  #  20220106
  #  lib_verify  -v  "$iso_path"  "$iso_sha"    sha256sum
  #  lib_verify  -v  "$iso_path"  "$iso_b2"     b2sum  -l 256
  return  ;  }


ubuntu_2110_extract  ()  {    #  ------------------------  ubuntu_2110_extract

  #  usage:  ubuntu_2110_extract

  [ -e "$guest" ]  &&
    die  "vland  error  userland already exists  '$guest'"

  ubuntu_2110_download
  ubuntu_2110_verify

  local  dir="$vland_dir"/dist/tmp
  local  sfs='casper/filesystem.squashfs'

  [ -e "$dir/$sfs" ]  ||  {
    trace_mkdir_p  "$dir"
    trace  7z  x  -o"$dir"  "$iso_path"  "$sfs"  ;  }

  [ -e "$guest" ]  ||  {
    trace  unsquashfs  -no-xattrs  -dest "$guest"  "$dir/$sfs"  ||
      true  ;  }

  echo
  trace  rm     "$dir/$sfs"
  trace  rmdir  "$dir/casper"
  trace  rmdir  "$dir"

  return  ;  }


ubuntu_2110_configure  ()  {    #  --------------------  ubuntu_2110_configure
  #  usage:  ubuntu_2110_configure
  trace  resolv_conf_sync  "$guest"/etc/resolv.conf  ;  }


ubuntu_2110_create  ()  {    #  --------------------------  ubuntu_2110_create
  #  usage:  ubuntu_2110_create
  ubuntu_2110_vars_set
  ubuntu_2110_extract
  ubuntu_2110_configure
  echo  ;  echo  'vland  ubuntu_2110_create  done'  ;  }


#  void  ---------------------------------------------------------------  void


void_vars_set  ()  {    #  ------------------------------------  void_vars_set

  #  usage:  void_vars_set

  tgz_ver='20210930'
  tgz_url='https://alpha.de.repo.voidlinux.org/live/current'
  tgz_url="${tgz_url}/void-x86_64-ROOTFS-${tgz_ver}.tar.xz"

  tgz_sha256='8681b060e39e173682e1721a6088280c2b6eade628f5e5e3e8e4b74163d187f6'
  tgz_b2='697b2e4e92c3fce1d74fea30fc3c9b95324a01ff59cb4cacf493a0ff29d750b7'

  tgz="${tgz_url##*/}"

  dist_path="$vland_dir/dist/void/$tgz"  ;  }


void_download  ()  {    #  ------------------------------------  void_download
  #  usage:  void_download
  [ -e "$dist_path" ]  &&  return
  echo  ;  echo  'void_download'
  void_vars_set
  lib_download  "$tgz_url"  "$dist_path"  ;  }


void_verify  ()  {    #  ----------------------------------------  void_verify
  #  usage:  void_verify
  echo  ;  echo  'void_verify'
  void_vars_set
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256  ;  }


void_extract  ()  {    #  --------------------------------------  void_extract
  #  usage:  void_extract
  [ -e "$guest" ]  &&
    die  "vland  error  userland already exists  '$guest'"
  void_download
  void_verify
  echo  ;  echo  'void_extract'
  trace  mkdir  -p  "$guest"
  trace  tar  xJf "$dist_path"  -C "$guest"  ;  }


void_configure  ()  {    #  ----------------------------------  void_configure
  #  usage:  void_configure
  echo  ;  echo  'void_configure'
  trace  resolv_conf_sync  "$guest"/etc/resolv.conf
  return  ;  }


void_create  ()  {    #  ----------------------------------------  void_create
  #  usage:  void_create
  void_vars_set
  void_extract
  void_configure
  echo  ;  echo  'vland  void_create  done'  ;  }


#  void_musl  -----------------------------------------------------  void_musl


void_musl_vars_set  ()  {    #  --------------------------  void_musl_vars_set

  #  usage:  void_musl_vars_set

  tgz_ver='20210930'
  tgz_url='https://alpha.de.repo.voidlinux.org/live/current'
  tgz_url="${tgz_url}/void-x86_64-musl-ROOTFS-${tgz_ver}.tar.xz"

  tgz_sha256='d322171b39e3c670faa2835f6c6bba27951a9710f018410e090247b651f9251a'
  tgz_b2='b35d71e4c330dc47412e3e8e1a4c99482ef306f0dff39ce494a4164babf5baca'

  tgz="${tgz_url##*/}"

  dist_path="$vland_dir/dist/void-musl/$tgz"  ;  }


void_musl_download  ()  {    #  --------------------------  void_musl_download
  #  usage:  void_download
  [ -e "$dist_path" ]  &&  return
  echo  ;  echo  'void_download'
  void_musl_vars_set
  lib_download  "$tgz_url"  "$dist_path"  ;  }


void_musl_verify  ()  {    #  ------------------------------  void_musl_verify
  #  usage:  void_verify
  echo  ;  echo  'void_verify'
  void_musl_vars_set
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256  ;  }


void_musl_create  ()  {    #  ------------------------------  void_musl_create
  #  usage:  void_musl_create
  void_musl_vars_set
  void_extract
  void_configure
  echo  ;  echo  'vland  void_musl_create  done'  ;  }


void_pkg_install  ()  {    #  ------------------------------  void_pkg_install
  #  usage:  void_pkg_install  package_name
  trace  lxr  -nr  --  xbps-install  --sync  --yes  "$1"  ;  }


#  self_test  -----------------------------------------------------  self_test


self_test_clean  ()  {    #  --------------------------------  self_test_clean
  #  usage:  self_test_clean
  echo  ;  echo  '+  self_test_clean'
  [ -d              "$vland_dir"/guest/vland-self-test ]  &&
    trace  rm  -rf  "$vland_dir"/guest/vland-self-test
  [ -d              "$vland_dir"/overlay/vland-self-test ]  &&
    trace  rm  -rf  "$vland_dir"/overlay/vland-self-test
  return  0  ;  }


self_test  ()  {    #  --------------------------------------------  self_test

  #  usage:  self_test

  [ -d "$vland_dir"/guest/vland-self-test/alpine ]  ||
    trace  vland  --create  alpine  vland-self-test/alpine

  [ -d "$vland_dir"/guest/vland-self-test/arch ]  ||
    trace  vland  --create  arch  vland-self-test/arch

  trace  vland  --pkg  vland-self-test/alpine  install        zsh
  trace  vland  --pkg  vland-self-test/alpine  build-install  lua5.4

  trace  vland  --pkg  vland-self-test/arch  install        zsh
  trace  vland  --pkg  vland-self-test/arch  build-install  lua
  trace  vland  --aur  vland-self-test/arch  build-install  jed-snapshot

  echo
  echo  '/=========================================================\'
  echo  '|                                                         |'
  echo  '|            ./vland --self-test  results                 |'
  echo  '|                                                         |'
  echo  '\=========================================================/'

  echo  ;  trace  vland  vland-self-test/alpine  --  zsh  --version
  echo  ;  trace  vland  vland-self-test/alpine  --  lua5.4  -v
  echo  ;  trace  vland  vland-self-test/arch  --  zsh  --version
  echo  ;  trace  vland  vland-self-test/arch  --  lua  -v
  echo  ;  trace  vland  vland-self-test/arch  --  jed  --version  |  head  -1

  echo
  echo  '/=========================================================\'
  echo  '|                                                         |'
  echo  '|            ./vland --self-test  done                    |'
  echo  '|                                                         |'
  echo  '\=========================================================/'  ;  }


self_test_full_distro  ()  {    #  --------------------  self_test_full_distro

  #  usage  self_test_full_distro  distro

  local  distro="$1"
  local  gn="vland-self-test/${distro}-full"    #  guest name

  [ -d "$vland_dir"/guest/"$gn" ]  ||  trace  vland  --create  "$distro"  "$gn"

  trace  overlay_parse  "$gn"    #  to set $overlay_home
  trace  mkdir  -p  "$overlay_home"
  trace  cp  "$VLAND_EXE"  "$overlay_home"/vland

  case  "$distro"  in
    ( alpine           )    local  pkgs='curl  tar  xz'   ;;
    ( arch             )    local  pkgs='wget'            ;;
    ( void | void-musl )    local  pkgs='curl  wget  xz'  ;;
    ( * )  die  "self_test_full_distro  invalid distro  '$distro'"  ;;  esac

  [ "$pkgs" ]  &&  trace  vland  --pkg  "$gn"  install  $pkgs
  trace  vland  "$gn"  -n  --  /bin/sh  ./vland  --self-test
  mute   self_test_clean
  return  ;  }


self_test_full  ()  {    #  ----------------------------------  self_test_full
  #  usage:  self_test_full
  self_test  ;  mute  self_test_clean
  self_test_full_distro  alpine
  self_test_full_distro  arch
  self_test_full_distro  void
  self_test_full_distro  void-musl
  return  ;  }


#  arch_web_seeds  -------------------------------------------  arch_web_seeds


arch_web_seeds='
  https://mirror.aarnet.edu.au/pub/archlinux/iso/
  https://mirrors.rit.edu/archlinux/iso/
  https://ftp.heanet.ie/mirrors/ftp.archlinux.org/iso/
  https://mirror.puzzle.ch/archlinux/iso/
  https://mirror.csclub.uwaterloo.ca/archlinux/iso/
  https://mirror.umd.edu/archlinux/iso/
  https://mirror.archlinux.no/iso/
  https://mirror.isoc.org.il/pub/archlinux/iso/
  https://mirror.yandex.ru/archlinux/iso/
  https://ftp.spline.inf.fu-berlin.de/mirrors/archlinux/iso/
  https://mirror.selfnet.de/archlinux/iso/
  https://mirrors.lug.mtu.edu/archlinux/iso/
  https://archlinux.nautile.nc/archlinux/iso/
  https://mirrors.kernel.org/archlinux/iso/
  https://ftp.rnl.tecnico.ulisboa.pt/pub/archlinux/iso/
  https://mirrors.dotsrc.org/archlinux/iso/
  https://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/
  https://ftp.halifax.rwth-aachen.de/archlinux/iso/
  https://shadow.ind.ntou.edu.tw/archlinux/iso/
  https://mirrors.rutgers.edu/archlinux/iso/
  https://mirrors.nix.org.ua/linux/archlinux/iso/
  https://mirrors.ustc.edu.cn/archlinux/iso/
  https://ftp.lysator.liu.se/pub/archlinux/iso/
  https://mirror.ams1.nl.leaseweb.net/archlinux/iso/
  https://mirror.dal10.us.leaseweb.net/archlinux/iso/
  https://mirror.fra10.de.leaseweb.net/archlinux/iso/
  https://mirror.mia11.us.leaseweb.net/archlinux/iso/
  https://mirror.sfo12.us.leaseweb.net/archlinux/iso/
  https://mirror.wdc1.us.leaseweb.net/archlinux/iso/
  https://mirrors.n-ix.net/archlinux/iso/
  https://mirror.dkm.cz/archlinux/iso/
  https://mirror.lnx.sk/pub/linux/archlinux/iso/
  https://mirror.ps.kz/archlinux/iso/
  https://mirror.bytemark.co.uk/archlinux/iso/
  https://mirror.rol.ru/archlinux/iso/
  https://mirror.i3d.net/pub/archlinux/iso/
  https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/
  https://mirrors.neusoft.edu.cn/archlinux/iso/
  https://www.mirrorservice.org/sites/ftp.archlinux.org/iso/
  https://mirror.netcologne.de/archlinux/iso/
  https://archlinux.vi-di.fr/iso/
  https://mirror.system.is/arch/iso/
  https://dfw.mirror.rackspace.com/archlinux/iso/
  https://hkg.mirror.rackspace.com/archlinux/iso/
  https://iad.mirror.rackspace.com/archlinux/iso/
  https://lon.mirror.rackspace.com/archlinux/iso/
  https://mirror.rackspace.com/archlinux/iso/
  https://ord.mirror.rackspace.com/archlinux/iso/
  https://syd.mirror.rackspace.com/archlinux/iso/
  https://arch.mirror.constant.com/iso/
  https://mirror.premi.st/archlinux/iso/
  https://download.nus.edu.sg/mirror/archlinux/iso/
  https://arch.nimukaito.net/iso/
  https://mirror.neuf.no/archlinux/iso/
  https://mirror.gnomus.de/iso/
  https://ftp.fau.de/archlinux/iso/
  https://gluttony.sin.cvut.cz/arch/iso/
  https://mirror.one.com/archlinux/iso/
  https://mirror.t-home.mk/archlinux/iso/
  https://ftp.yzu.edu.tw/Linux/archlinux/iso/
  https://mirror.metalgamer.eu/archlinux/iso/
  https://mirrors.niyawe.de/archlinux/iso/
  https://mirrors.atviras.lt/archlinux/iso/
  https://arch.yourlabs.org/iso/
  https://arch.midov.pl/arch/iso/
  https://arch.mirror.zachlge.org/iso/
  https://archlinux.koyanet.lv/archlinux/iso/
  https://ftp.myrveln.se/pub/linux/archlinux/iso/
  https://mirror.telepoint.bg/archlinux/iso/
  https://archlinux.mailtunnel.eu/iso/
  https://mirrors.cqu.edu.cn/archlinux/iso/
  https://archlinux.mirror.digitalpacific.com.au/iso/
  https://mirror.f4st.host/archlinux/iso/
  https://mirrors.ocf.berkeley.edu/archlinux/iso/
  https://ftp.acc.umu.se/mirror/archlinux/iso/
  https://mirror.hackingand.coffee/arch/iso/
  https://mirrors.uni-plovdiv.net/archlinux/iso/
  https://mirror.pseudoform.org/iso/
  https://mirror.lty.me/archlinux/iso/
  https://arch.jensgutermuth.de/iso/
  https://pkg.adfinis.com/archlinux/iso/
  https://ftp.sh.cvut.cz/arch/iso/
  https://arch-mirror.wtako.net/iso/
  https://muug.ca/mirror/archlinux/iso/
  https://mirror.0x.sg/archlinux/iso/
  https://mirror.wormhole.eu/archlinux/iso/
  https://mirror.kaminski.io/archlinux/iso/
  https://mirror.ubrco.de/archlinux/iso/
  https://archlinux.ip-connect.vn.ua/iso/
  https://mirror.sergal.org/archlinux/iso/
  https://mirrors.xjtu.edu.cn/archlinux/iso/
  https://arlm.tyzoid.com/iso/
  https://archlinux.thaller.ws/iso/
  https://archimonde.ts.si/archlinux/iso/
  https://www.ratenzahlung.de/mirror/archlinux/iso/
  https://mirror.smith.geek.nz/archlinux/iso/
  https://archlinux.mirror.wearetriple.com/iso/
  https://mirror.kku.ac.th/archlinux/iso/
  https://mirror.osbeck.com/archlinux/iso/
  https://glua.ua.pt/pub/archlinux/iso/
  https://ftp.lanet.kr/pub/archlinux/iso/
  https://mirrors.celianvdb.fr/archlinux/iso/
  https://arch.mirror.square-r00t.net/iso/
  https://mirror.pkgbuild.com/iso/
  https://mirror.xtom.com.hk/archlinux/iso/
  https://mirror.truenetwork.ru/archlinux/iso/
  https://mirrors.nxthost.com/archlinux/iso/
  https://mirror-hk.koddos.net/archlinux/iso/
  https://mirror.koddos.net/archlinux/iso/
  https://ftp.wrz.de/pub/archlinux/iso/
  https://mirror.thekinrar.fr/archlinux/iso/
  https://mirror.neostrada.nl/archlinux/iso/
  https://mirrors.ukfast.co.uk/sites/archlinux.org/iso/
  https://archlinux.mivzakim.net/iso/
  https://mirror.srv.fail/archlinux/iso/
  https://mirror.reisenbauer.ee/archlinux/iso/
  https://packages.oth-regensburg.de/archlinux/iso/
  https://mirror.orbit-os.com/archlinux/iso/
  https://mirror.stephen304.com/archlinux/iso/
  https://mirrors.sjtug.sjtu.edu.cn/archlinux/iso/
  https://mirrors.cat.net/archlinux/iso/
  https://mirror.oldsql.cc/archlinux/iso/
  https://arch.mirrors.lavatech.top/iso/
  https://mirror.checkdomain.de/archlinux/iso/
  https://mirrors.xtom.com/archlinux/iso/
  https://dist-mirror.fem.tu-ilmenau.de/archlinux/iso/
  https://mirror.fsmg.org.nz/archlinux/iso/
  https://archlinux.grena.ge/iso/
  https://archlinux.mirror.pcextreme.nl/iso/
  https://mirror.cyberbits.eu/archlinux/iso/
  https://repo.ialab.dsu.edu/archlinux/iso/
  https://arch.unixpeople.org/iso/
  https://archlinux.mirror.liquidtelecom.com/iso/
  https://nova.quantum-mirror.hu/mirrors/pub/archlinux/iso/
  https://quantum-mirror.hu/mirrors/pub/archlinux/iso/
  https://super.quantum-mirror.hu/mirrors/pub/archlinux/iso/
  https://archlinux.uk.mirror.allworldit.com/archlinux/iso/
  https://archlinux.za.mirror.allworldit.com/archlinux/iso/
  https://mirror.librelabucm.org/archlinux/iso/
  https://mirror-archlinux.webruimtehosting.nl/iso/
  https://mirror.netweaver.uk/archlinux/iso/
  https://mirror.wtnet.de/arch/iso/
  https://mirror.mirohost.net/archlinux/iso/
  https://ftp.harukasan.org/archlinux/iso/
  https://mirror.ufro.cl/archlinux/iso/
  https://mirror.aktkn.sg/archlinux/iso/
  https://arch.nixlab.pl/iso/
  https://mirrors.xtom.nl/archlinux/iso/
  https://mirror.scd31.com/arch/iso/
  https://ftp.icm.edu.pl/pub/Linux/dist/archlinux/iso/
  https://mirror.mikrogravitation.org/archlinux/iso/
  https://mirror.chaoticum.net/arch/iso/
  https://iad.mirrors.misaka.one/archlinux/iso/
  https://mirror.pit.teraswitch.com/archlinux/iso/
  https://archlinux.mirror.liteserver.nl/iso/
  https://mirrors.ims.nksc.lt/archlinux/iso/
  https://mirrors.eric.ovh/arch/iso/
  https://mirror.arizona.edu/archlinux/iso/
  https://mirror.cloroformo.org/archlinux/iso/
  https://mirror2.evolution-host.com/archlinux/iso/
  https://mirror.redrock.team/archlinux/iso/
  https://archmirror1.octyl.net/iso/
  https://mirror.telkomuniversity.ac.id/archlinux/iso/
  https://mirror.serverion.com/archlinux/iso/
  https://plug-mirror.rcac.purdue.edu/archlinux/iso/
  https://mirror.efect.ro/archlinux/iso/
  https://mirrors.mit.edu/archlinux/iso/
  https://arch.hu.fo/archlinux/iso/
  https://mirrors.chroot.ro/archlinux/iso/
  https://mirrors.melbourne.co.uk/archlinux/iso/
  https://mirror.tarellia.net/distr/archlinux/iso/
  https://mirrors.piconets.webwerks.in/archlinux-mirror/iso/
  https://mirrors.urbanwave.co.za/archlinux/iso/
  https://mirrors.dgut.edu.cn/archlinux/iso/
  https://mirror.sysa.tech/archlinux/iso/
  https://mirror.rasanegar.com/archlinux/iso/
  https://mirror.wuki.li/archlinux/iso/
  https://ftp.sudhip.com/archlinux/iso/
  https://mirrors.bfsu.edu.cn/archlinux/iso/
  https://mirroir.wptheme.fr/archlinux/iso/
  https://mirror.kumi.systems/archlinux/iso/
  https://mirrors.slaanesh.org/archlinux/iso/
  https://mirrors.nju.edu.cn/archlinux/iso/
  https://mirror1.cl.netactuate.com/archlinux/iso/
  https://mirrors.gethosted.online/archlinux/iso/
  https://phinau.de/arch/iso/
  https://mirrors.daan.vodka/archlinux/iso/
  https://mirror.satis-faction.de/archlinux/iso/
  https://mirror.sfinae.tech/pub/mirrors/archlinux/iso/
  https://mirror.gi.co.id/archlinux/iso/
  https://mirror.papua.go.id/archlinux/iso/
  https://mirror.lyrahosting.com/archlinux/iso/
  https://mirror.hodgepodge.dev/archlinux/iso/
  https://repo.inara.pk/archlinux/iso/
  https://mirror.dogado.de/archlinux/iso/
  https://opnmirror.co.za/archlinux/iso/
  https://mirror.clientvps.com/archlinux/iso/
  https://zxcvfdsa.com/arch/iso/
  https://mirror.ihost.md/archlinux/iso/
  https://pkg.fef.moe/archlinux/iso/
  https://mirror.ette.biz/archlinux/iso/
  https://theswissbay.ch/archlinux/iso/
  https://archmirror.it/repos/iso/
  https://mirror.anigil.com/archlinux/iso/
  https://mirrors.hit.edu.cn/archlinux/iso/
  https://mirror.hoster.kz/archlinux/iso/
  https://arch.lucassymons.net/iso/
  https://ftp.agdsn.de/pub/mirrors/archlinux/iso/
  https://mirror.ava.dev/archlinux/iso/
  https://mirror.guillaumea.fr/archlinux/iso/
  https://vpsmurah.jagoanhosting.com/archlinux/iso/
  https://mirror.arctic.lol/ArchMirror/iso/
  https://mirror.surf/archlinux/iso/
  https://mirror.cspacehostings.com/archlinux/iso/
  https://arch.mcstrugs.org/iso/
  https://repo.greeklug.gr/data/pub/linux/archlinux/iso/
  https://europe.mirror.pkgbuild.com/iso/
  https://america.mirror.pkgbuild.com/iso/
  https://asia.mirror.pkgbuild.com/iso/
  https://arch.mirror.jsc.mx/iso/
  https://mirror.darklinux.uk/archlinux/iso/
  https://free.nchc.org.tw/arch/iso/
  https://mirror.juniorjpdj.pl/archlinux/iso/
  https://tedwall.se/archlinux/iso/
  https://archlinux.qontinuum.space:4443/iso/
  https://mirror.nw-sys.ru/archlinux/iso/
  https://repo.skni.umcs.pl/archlinux/iso/
  https://mirror.cybersecurity.nmt.edu/archlinux/iso/
  https://mirror.0xem.ma/arch/iso/
  https://mirror.cj2.nl/archlinux/iso/
  https://mirror.hostup.org/archlinux/iso/
  https://mirrors.xtom.de/archlinux/iso/
  https://mirrors.xtom.ee/archlinux/iso/
  https://mirror.cyberbits.asia/archlinux/iso/
  https://mirror.moson.org/arch/iso/
  https://mirror.phx1.us.spryservers.net/archlinux/iso/
  https://arch.yhtez.xyz/iso/
  https://mirror.2degrees.nz/archlinux/iso/
  https://arch.powerfly.ca/iso/
  https://ftp.ludd.ltu.se/mirrors/archlinux/iso/
  https://mirror.jingk.ai/archlinux/iso/
  https://mirrors.wsyu.edu.cn/archlinux/iso/
  https://mirrors.radwebhosting.com/archlinux/iso/
  https://mirror.theash.xyz/arch/iso/
  https://mirror.cov.ukservers.com/archlinux/iso/
  https://archlinux.astra.in.ua/iso/
  https://ftp.psnc.pl/linux/archlinux/iso/
  https://mirror.clarkson.edu/archlinux/iso/
  https://mirror.repository.id/archlinux/iso/
  https://repo.endpoint.ml/archlinux/iso/
  https://mirrors.kamey.tk/archlinux/iso/
  https://mirror.iusearchbtw.nl/iso/
  https://mirrors.up.pt/pub/archlinux/iso/
  https://mirror.bardia.tech/archlinux/iso/
  https://de.arch.mirror.kescher.at/iso/
  https://tick-tack.mynetgear.com/archlinux/iso/
  https://archlinux.homeinfo.de/iso/
  https://archlinux.ourhome.kiwi/iso/'




#  main  ---------------------------------------------------------------  main


main  "$@"




#  vland.sh  -  Create and use chroot-style virtual software environments.
#
#  Copyright (c) 2022 Parke Bostrom, parke.nexus at gmail.com
#
#  This program is free software: you can redistribute it and/or
#  modify it under the terms of version 3 of the GNU General Public
#  License as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See version 3
#  of the GNU General Public License for more details.
#
#  You should have received a copy of version 3 of the GNU General
#  Public License along with this program.  If not, see
#  <https://www.gnu.org/licenses/>.

#! /bin/bash


#  vland.sh  -  Create and use chroot-style virtual software environments.
#  Copyright (c) 2022 Parke Bostrom, parke.nexus at gmail.com
#  Distributed under GPLv3 (see end of file) WITHOUT ANY WARRANTY.


readonly  VLAND_VERSION='0.22.2'    #  20220810


set  -o errexit
#et  -o xtrace  ;  PS4='$LINENO  '    #  LINENO is bash specific


readonly  VLAND_EXE="$(  realpath  "$0"  )"


help_short  ()  {    #  ------------------------------------------  help_short
  echo  \
"
usage:  vland  overlay      [option ...]  [--  command  [arg ...]]
        vland  --operation  [option ...]
        vland  --help"  ;  }


help  ()  {    #  ------------------------------------------------------  help

  echo  \
"vland version ${VLAND_VERSION}
Copyright (C) 2021-2022 by Parke Bostrom
Website:  https://github.com/parke/vland"

  help_short

  echo  \
"
common operations:

  --create    distro  [guest  [overlay]]
  --download  distro     #  download the distro's .iso or chroot tarball
  --update    overlay    #  update  overlay's guest
  --upgrade   overlay    #  upgrade overlay's guest

  --version              #  display vland version
  --help                 #  display vland help

  --self-test            #  run small vland self-test
  --self-test-full       #  run full  vland self-test
  --self-test-clean      #  I think this removes all the self-test files.

package management operations:

  --pkg  overlay  action  [package ...]
  --aur  overlay  action  [package ...]
  where action is one of:  install  deps  build  build-install  build-clean

experimental operations:

  --steam      #  install valve's steam client.
  --snap       guest  [suffix]    #  create a Btrfs snapshot of guest.
  --snap-save  guest  name
  --snap-copy  guest  dest

An example:
$  vland  --create  arch    #  Create an Arch Linux guest named 'arch'.
$  vland  arch  -nr         #  Enter the 'arch' guest as root.

Another example:
$  vland  --create  ubuntu          #  Create an Ubuntu guest named 'ubuntu'.
$  vland  --steam   ubuntu          #  Install Steam in the guest.
$  vland  -nx  ubuntu  --  steam    #  Run steam."  ;  }


main  ()  {    #  ------------------------------------------------------  main

  main_cpu_check
  config_init  "$@"

  while  true  ;  do
    local  main_shift='0'
    case  "$1"  in
      ( --guest )  vset  guest  "$2"  ;  main_shift='2'  ;;
      ( *       )  break             ;;  esac
    shift  "$(  main_shift  "$@"  )"  ;  done

  case  "$1"  in

    #  note  the overlay case (main_launch) is at the bottom

    (  ''           )  main_status   ;  exit  ;;

    (  --create     )  create         "$@"    ;;
    (  --download   )  main_download  "$@"    ;;

    (  --update     )  update         "$@"    ;;
    (  --upgrade    )  upgrade        "$@"    ;;

    (  --pkg        )  pkg            "$@"    ;;
    (  --aur        )  pkg            "$@"    ;;

    (  --steam      )  apt_steam      "$@"    ;;    #  experimental

    (  --snap       )  snap           "$@"    ;;    #  experimental
    (  --snap-save  )  snap_save      "$@"    ;;    #  experimental
    (  --snap-copy  )  snap_copy      "$@"    ;;    #  experimental

    (  --list       )  main_list              ;;    #  undocumented

    (  --help       )  help          ;  exit  ;;
    (  --help_man   )  help_man      ;  exit  ;;
    (  --version    )  main_version  ;  exit  ;;

    (  --self-test        )  self_test        ;;
    (  --self-test-full   )  self_test_full   ;;
    (  --self-test-clean  )  self_test_clean  ;;

    #  undocumented internal commands
    (  --aria2c-install   )  aria2c_install   ;;    #  undocumented
    (  --lxroot-install   )  lxroot_install   ;;    #  undocumented

    #  wildcard commands
    (  --*  )  die  "vland  error  invalid operation  '$1'"  ;;
    (  *    )  main_launch  "$@"  ;;
    esac

  echo  ;  echo  "vland  done  '$*'"

  exit  ;  }


config_unset  ()  {    #  --------------------------------------  config_unset

  unset  vland_dir       #  typically:  $HOME/.local/vland  or  /vland/$USER
  unset  vland_mnt       #  typically:  /mnt/vland/$USER

  unset  overlay_name    #  the name of the overlay
  unset  guest_name      #  the name of the guest
  unset  distro          #  the name of the distro

  unset  overlay         #  typically:  $vland_dir/overlay/$overlay_name
  unset  guest           #  typcially:  $vland_dir/guest/$guest_name

  unset  overlay_home    #  typically:  ${overlay}${HOME}
  unset  squash          #  typically:  $vland_dir/squash/$guest_name
  unset  squash_binds    #  detected squash binds, if any

  unset  tgz_url         #  typically:  the url of distro rootfs tarball
  unset  tgz             #  typically:  the filename portion of $tgz_url
  unset  dist_path       #  typically:  $vland_dir/dist/$distro/$tgz

  #  hooks for use in $overlay/vland.conf
  unset  -v  custom_options     #  optional custom options for lxroot
  unset  -f  custom_launcher    #  an optional, custom launcher function

  #  internal variables
  unset  -v  lxr_exec    #  '' or 'exec'

  ###  variables that are imported from the environment
  #
  #      VLAND_GUEST      #  with --create:  will specify $guest
  #      VLAND_OVERLAY    #  with --create:  will specify $overlay

  return  ;  }


config_vland_dir  ()  {    #  -------------------------  main_config_vland_dir
  local  hlv="$HOME"/.local/vland
  is_str   "$vland_dir"    &&  {  echo  "$vland_dir"    ;  return  ;  }
  is_str   "$VLAND_DIR"    &&  {  echo  "$VLAND_DIR"    ;  return  ;  }
  is_dir   "$hlv"          &&  {  echo  "$hlv"          ;  return  ;  }
  is_link  "$hlv"          &&  {  #  vtrace  mkdir  "$( realpath "$hlv" )"
                                  echo  "$hlv"          ;  return  ;  }
  is_dir   "/vland/$USER"  &&  {  echo  "/vland/$USER"  ;  return  ;  }
  echo  "$hlv"  ;  }


config_defaults  ()  {    #  --------------------------------  config_defaults
  is_str  "$vland_dir"  ||  readonly  vland_dir="$(  config_vland_dir  )"
  is_str  "$vland_mnt"  ||  readonly  vland_mnt="/mnt/vland/$USER"  ;  }


config_init  ()  {    #  ----------------------------------------  config_init
  #  usage:  config_init  [arg ...]
  #  note:  all of arg... from main will be accessible when '$path' is sourced
  config_unset
  local  path="$HOME/.config/vland/vland.conf"
  is_file  "$path"  &&  .  "$path"
  config_defaults  ;  }


config_guest  ()  {    #  --------------------------------------  config_guest

  #  20220212  now obsolete?
  #  not_str  "$guest_name"  &&  guest_name="$overlay_name"
  #  not_str  "$guest"       &&  guest="$vland_dir/guest/$guest_name"

  is_str  "$guest"  &&  {
    not_str  "$guest_name"  &&  guest_name="${guest##*/}"
    return  0  ;  }

  is_str  "$guest_name"  &&
    {  guest="$vland_dir/guest/$guest_name"  ;  return  ;  }

  local  path="$vland_dir/guest/$overlay_name"
  is_str  "$overlay_name"  &&  is_dir  "$path"  &&
    {  guest_name="$overlay_name"  ;  guest="$path"  ;  return  ;  }

  local  path="$vland_dir/guest/default"
  is_dir  "$path"  &&
    {  guest_name='default'  ;  guest="$path"  ;  return  ;  }

  return  0  ;  }


config_overlay  ()  {    #  ----------------------------------  config_overlay

  #  usage:  config_overlay  overlay_name

  not_str "$vland_dir"  &&  die  "vland  internal error  vland_dir not set"

  case  "$1"  in
    ( '' | -* )  die  "vland  error  invalid overlay  '$1'"  ;;
    ( *       )  overlay_name="$1"  ;;
    esac

  not_str  "$overlay"  &&  overlay="$vland_dir/overlay/$overlay_name"

  overlay_home="${overlay}${HOME}"    #  convenient but potentially incorrect

  not_dir  "$overlay"  &&  die  "vland  overlay not found  '$overlay'"
  is_file  "$overlay"/vland.conf  &&  .  "$overlay"/vland.conf
  squash_detect
  config_guest  ;  }


help_man  ()  {    #  ----------------------------------------------  help_man
  echo  \
"
To create a guest and an overlay:
$  vland  --create  distro  [guest  [overlay]]
If not specified, guest   defaults to distro.
If not specified, overlay defaults to guest.

To run a shell (or a command) in an overlay:
$  vland  overlay  [option ...]  [--  command  [arg ...]]
Any specified options (and command) are simply passed through to lxroot.
If no command is specified, vland will run an interactive shell in the guest.
You specify only an overlay.  By default, the matching guest will be used.

Explanation of 'guest' and 'overlay':
You may think of the 'guest' as being the 'root partition'.
Whereas the 'overlay' is the '/home directory'.
The above explanation is a slight oversimplification, as ...
... an overlay typically also includes /root and /tmp.
This separation will allow running mulitple overlays on the same guest.
By default, the guest is read-only, whereas the overlay is writable.
The separation will also allow running the same overlay on multiple guests.
Some overlay/guest functionality is not yet implemented ...
... nonetheless, vland *always* uses an overlay together with a guest.
By default, the overlay and the guest have the same name.
For many common use cases, it may be simplest ...
... to think of them as being a bonded pair that are always used together.

To install packages (in a guest):
$  vland  --pkg  overlay  install  package...
Where 'overlay' is the name of the overlay/guest you wish to use.
The packages will typically be installed in the guest, not in the overlay.

To build packages (in an overlay):
$  vland  --pkg  overlay  build  package...
The packages will be built in \$HOME, which is typically part of the overlay.

To build and install packages (in an overlay and a guest, respectively):
$  vland  --pkg  overlay  build-install  package...
The packages will be built in \$HOME, which is typically part of the overlay.
The packages will typically be installed in the guest, not in the overlay.

On 'void' guests '--pkg' is only partly implemented at present.

Common lxroot options:
-n    grant the guest access to the host's network interfaces
-r    simulate uid = 0 (root)
-w    grant full write access (even to a non-root user)
-x    grant the guest access to the host's Xorg server
For additional lxroot options, please see the lxroot documentation.

Supported distros:
alpine     Alpine Linux
arch       Arch Linux
void       Void Linux
void-musl  Void Linux (with musl libc)

Fyi, the default location for guests and overlays is either:
\$HOME/.local/vland  or  /vland/\$USER


Package actions (for use with --pkg and --aur):

update           update/sync the guest's package database
install          download and install packages
deps             download and install build dependencies
build            build packages
build-install    build and install packages
build-clean      remove non-essential build time files

Anticipated future operations that are not yet implemented:

--guest  guest  overlay  [option ...]  [--  command  [arg ...]]"

  return  ;  }


#  main  ---------------------------------------------------------------  main


main_cpu_check  ()  {    #  ----------------------------------  main_cpu_check
  local  cpu="$(  uname  -m  )"
  [ "$cpu" = 'x86_64' ]  &&  return
  die  "vland  error  unsupported cpu type  '$machine'"  ;  }


main_download  ()  {    #  ------------------------------------  main_download
  #  usage:  main_download  --download  distro
  case  "$2"  in
    ( alpine      )  alpine_download       ;  alpine_verify       ;;
    ( arch        )  arch_download         ;  arch_verify         ;;
    ( void        )  void_download         ;  void_verify         ;;
    ( void-musl   )  void_musl_download    ;  void_musl_verify    ;;
    ( * )  die  "vland  error  download unsupported  '$2'"  ;;
   esac  }


main_list  ()  {    #  --------------------------------------------  main_list
  #  usage:  main_list
  echo
  echo  'main_list'
  echo  "  vland_dir  '$vland_dir'"
  return  ;  }


main_status  ()  {    #  ----------------------------------------  main_status

  is_str  "$vland_dir"  &&  is_dir  "$vland_dir/overlay"  &&  {
    echo
    echo  "vland_dir  '$vland_dir'"
    echo
    echo  'overlays'
    ls  "$vland_dir/overlay"  |  indent  '  '
    return  ;  }

  help  ;  }


main_version  ()  {    #  --------------------------------------  main_version
  echo  "vland  version  $VLAND_VERSION"  ;  }


#  create  -----------------------------------------------------------  create


create_help  ()  {    #  ----------------------------------------  create_help
  echo  \
'
usage:  ./vland  --create  distro  [guest]  [overlay]

supported distros
  alpine
  arch
  ubuntu       #  Ubuntu 22.04
  void
  void-musl'  ;  }


create_init  ()  {    #  ----------------------------------------  create_init

  #  usage:  create_init  --create  distro  [guest]  [overlay]

  is_str  "$distro"   &&  die  "create_init  unexpected distro  '$distro'"
  is_str  "$guest"    &&  die  "create_init  unexpected guest  'guest'"
  is_str  "$overlay"  &&  die  "create_init  unexpected overlay  '$overlay'"

  distro="$2"

  not_str  "$distro"  &&  {  create_help  ;  exit  1  ;  }

  not_str  "$guest"         &&  guest="$VLAND_GUEST"
  not_str  "$overlay"       &&  overlay="$VLAND_OVERLAY"

  not_str  "$guest_name"    &&  guest_name="$3"
  not_str  "$guest_name"    &&  guest_name="${guest##*/}"
  not_str  "$guest_name"    &&  guest_name="$distro"

  not_str  "$overlay_name"  &&  overlay_name="$4"
  not_str  "$overlay_name"  &&  overlay_name="${overlay##*/}"
  not_str  "$overlay_name"  &&  overlay_name="$guest_name"

  not_str  "$guest"         &&  guest="$vland_dir/guest/$guest_name"
  not_str  "$overlay"       &&  overlay="$vland_dir/overlay/$overlay_name"

  overlay_home="$overlay/${HOME#/}"  ;  }


create_overlay  ()  {    #  ----------------------------------  create_overlay
  #  usage:  create_overlay
  is_dir  "$overlay"  &&  return
  echo  'create_overlay  begin'
  trace_mkdir_p  "$overlay"
  echo  'create_overlay  done'  ;  }


create_guest  ()  {    #  --------------------------------------  create_guest
  #  usage:  create_guest
  case  "$distro"  in
    ( alpine      )  alpine_create       ;  return  ;;
    ( arch        )  arch_create         ;  return  ;;
    ( ubuntu      )  apt_create          ;  return  ;;
    ( void        )  void_create         ;  return  ;;
    ( void-musl   )  void_musl_create    ;  return  ;;
    esac
  die  "vland  error  unsupported distro  '$distro'"  ;  }


create  ()  {    #  --------------------------------------------------  create
  #  usage:  create  --create  distro  [land]  [overlay]
  create_init  "$@"
  echo  ;  echo  "vland  create  '$*'"

  #  20220808  pwh  todo  move check from create() into each distro itself.
  #  guest_exists  &&  die  "vland  error  guest already exists  '$guest'"

  create_overlay
  create_guest  ;  }


#  lxr & main_launch  -------------------------------------  lxr & main_launch


lxr_init_land  ()  {    #  ------------------------------------  lxr_init_land
  #  usage:  lxr_init_land
  not_dir  "$guest"  &&  die  "vland  error  guest not found  '$guest_name'"
  #  20220212  todo  add $USER to /etc/passwd
  return  0  ;  }


lxr_init_over  ()  {    #  ------------------------------------  lxr_init_over
  #  usage:  lxr_init_over
  not_dir  "$overlay"  &&
    die  "vland  error  overlay not found  '$overlay_name'"
  #  20211221  todo  read $HOME from $guest/etc/passwd
  #  20211227  todo  add  $USER to   $guest/etc/passwd
  mkdir  -p  "$overlay_home"
  mkdir  -p  "$overlay/root"
  mkdir  -p  "$overlay/tmp/.X11-unix"
  return  ;  }


lxr_prepare_pulseaudio  ()  {    #  ------------------  lxr_prepare_pulseaudio
  local  UID="$(  id  -u  )"
  trace_mkdir_p  "$overlay/run/user/$UID/pulse"  ;  }


lxr_prepare_xauthority  ()  {    #  ------------------  lxr_prepare_xauthority
  local  src="$HOME/.Xauthority"  dst="$overlay_home/.Xauthority"
  [ -f "$src" ]  ||  return  0
  cmp  --silent  "$src"  "$dst"  &&  return
  trace  cp  "$src"  "$dst"  ;  }


lxr_prepare_parse  ()  {    #  --------------------------  lxr_prepare_parse
  #  usage:  lxr_prepare_parse  [option...]  [--  command  [arg...]]
  while  [ "$1" ]  ;  do
    case  "$1"  in
      ( --           )  return  ;;
      ( --pulseaudio )  lxr_prepare_pulseaudio  ;;
      ( --x11        )  lxr_prepare_xauthority  ;;
      ( --*          )  ;;    #  skip
      ( -*x*         )  lxr_prepare_xauthority  ;;
      esac
    shift  ;  done  ;  }


lxr_prepare  ()  {    #  ----------------------------------------  lxr_prepare
  #  usage:  lxr_preapre  [option...]  [--  command  [arg...]]
  lxr_init_over
  lxr_init_land
  lxr_prepare_parse  "$@"
  lxroot_install
  is_equal  "$vland_xray"  '1'  &&  xray  'lxr_prepare'
  return  0  ;  }


lxr  ()  {    #  --------------------------------------------------------  lxr
  #  usage:  lxr_exec  [option...]  [--  command  [arg...]]
  lxr_prepare  $custom_options  "$@"
  $lxr_exec  "$lxroot"  "$guest"  "$overlay"  \
    $squash_binds  $custom_options  "$@"  ;  }


lxr_exec  ()  {    #  ----------------------------------------------  lxr_exec
  #  usage:  lxr_exec  [option...]  [--  command  [arg...]]
  local  lxr_exec='exec'  ;  lxr  "$@"  ;  }


main_launch_shift  ()  {    #  ----------------------------  main_launch_shift
  #  usage:  launch_shift  "$1"
  case  "$1"  in
    ( -* | '' )  return  1  ;;    #  don't discard these
    esac  ;  }                    #  discard everything else


main_launch  ()  {    #  ----------------------------------------  main_launch
  #  usage:  main_launch  overlay  [option...]  [--  command  [arg...]]
  config_overlay  "$1"  ;  shift
  is_function  launch_custom  &&  {  launch_custom  "$@"  ;  return  ;  }
  lxr_exec  "$@"  ;  }


#  lib  -----------------------------------------------------------------  lib


is_dir      ()  {  [ -d   "$1" ]  ;  }
is_file     ()  {  [ -f   "$1" ]  ;  }
is_link     ()  {  [ -h   "$1" ]  ;  }
is_str      ()  {  [      "$1" ]  ;  }
not_dir     ()  {  [ ! -d "$1" ]  ;  }
not_exists  ()  {  [ ! -e "$1" ]  ;  }
not_file    ()  {  [ ! -f "$1" ]  ;  }
not_link    ()  {  [ ! -h "$1" ]  ;  }
not_str     ()  {  [ !    "$1" ]  ;  }

echo_die       ()  {  echo  ;  die  "$@"  ;  }
echo_dir       ()  {  is_dir  "$1"  &&  echo  "$1"  ;  }
echo_trace     ()  {  echo  ;  trace  "$@"  ;  }
is_equal       ()  {  [ "$1" = "$2" ]  ;  }
is_mountpoint  ()  {  mountpoint  -q  "$1"  ;  }

is_equal        (){  [ "$1" = "$2" ]         ;}    #  --------------  is_equal
not             (){  !  "$@"                 ;}    #  -------------------  not
not_equal       (){  [ ! "$1" = "$2" ]       ;}    #  -------------  not_equal

ee              (){  echo  ;  echo   "$@"          ;}    #  --------------  ee
et              (){  echo  ;  trace  "$@"          ;}    #  --------------  et
log             (){  1>&2  "$@"                    ;}    #  -------------  log

mkdir_p         (){  is_dir  "$1"  ||  trace  mkdir  -p  "$1"  ;}    #  ------


aria2c_install  ()  {    #  ----------------------------------  aria2c_install

  #  usage:  aria2c_install

  [ "$aria2c" ]  &&  return

  [ "$( which2 aria2c )" ]  &&  {  readonly  aria2c='aria2c'  ;  return  ;  }

  echo  ;  echo  'aria2c_install'

  local  url_base='https://github.com/parke/aria2.sh/releases/download/0.21.0'
  local  url="$url_base/aria2c-x86_64-20211228.txz"
  local  path="$vland_dir/dist/aria2/${url##*/}"
  local  sha='74272ef1b7cbccbcdf82aeda7464b2ffff9241cb18c06121263c3126b61e4810'
  local  b2='7be265a672873c5f4f164a3da8c003eea5c5c3006f70ec5fbb0d8a2fb4d028fe'
  local  bin_dir="$vland_dir/dist/bin"

  lib_download  "$url"  "$path"
  lib_verify    "$path"  "$sha"    sha256sum
  lib_verify    "$path"  "$b2"     b2sum  -l 256

  trace_mkdir_p  "$bin_dir"
  trace  tar  xJf  "$path"  -C "$bin_dir"

  local  sha='85c2cd2eff637fbd7eecdd438ccd1b1053660e052d41a3055dceb703d92c4dba'
  local  b2='43c93739d17431e7eaebcc0f0dc9b725acccef5e03cfca2923a3631c81a43649'

  readonly  aria2c="$bin_dir/aria2c-x86_64"

  lib_verify  "$aria2c"  "$sha"    sha256sum
  lib_verify  "$aria2c"  "$b2"     b2sum  -l 256  ;  }


ask  ()  {    #    ------------------------------------------------------  ask
  #  usage:  ask  command  [arg ...]
  case  "$automatic"  in
    # yes )  true  ;;    #  20220808  automatic mode intentionally disabled
    ( *   )  log  printf  '\nask:  %s\n'  "$*"
             log  printf  '\nask:  %s'    "Run the above command?  [y/n]  "
             local  line  ;  read  line
             not_equal  "$line"  y  &&  exit  1  ;;  esac
  et  "$@"  ;  }


assert_guest_does_not_exist  ()  {    #  --------  assert_guest_does_not_exist
  guest_exists  &&  die  "error  guest already exists  '$guest'"  ;  }


cmp  ()  {    #  --------------------------------------------------------  cmp
  #  usage:  cmp  [--silent]  file1  file2
  #  busybox cmp lacks '--silent' but has '-s'
  [ "$1" = '--silent' ]  &&  {  command  cmp  -s  "$2"  "$3"  ;  return  ;  }
  command  cmp  "$@"  ;  }


die  ()  {    #  --------------------------------------------------------  die
  1>&2  echo  "$*"  ;  exit  1  ;  }


distro_detect  ()  {    #  ------------------------------------  distro_detect

  #  usage:  distro_detect

  is_str  "$distro"  &&  echo  "vland  warn  distro already set  '$distro'"

  if  [ -e "$guest"/etc/os-release ]  ;  then
    local  line
    while  read  line  ;  do
      [ "$distro" ]  &&  break
      case  "$line"  in
        ( ID=alpine                     )  distro='alpine'  ;;
        ( ID=arch                       )  distro='arch'    ;;
        ( ID=void | ID=[\'\"]void[\'\"] )  distro='void'    ;;  esac
      done  <  "$guest"/etc/os-release  ;  fi

  not_str  "$distro"  &&  echo  "vland  warn  distro_detect  failed"

  return  0  ;  }


distro_unsupported  ()  {    #  --------------------------  distro_unsupported
  echo  ;  echo  "vland  distro not supported  '$1'"  ;  exit  1  ;  }


guest_exists  ()  {    #  --------------------------------------  guest_exists
  is_dir  "$guest"  &&  is_str  "$( ls -A "$guest" )"  ;  }


indent  ()  {    #  --------------------------------------------------  indent
  #  usage:  indent  spacer
  local  line  ;  while  read  line  ;  do  echo  "${1}${line}"  ;  done  }


is_function  ()  {    #  ----------------------------------------  is_function

  #  usage:  is_function  func_name

  #  bash
  #
  case  "$(  type  -t  "$1"  )"  in    #  bash
    ( 'function' )  return  0  ;;      #  bash
    esac

  #  dash
  #
  #  case  "$(  type  "$1"  )"  in                   #  dash
  #    ( *' is a shell function' )  return  0  ;;    #  dash
  #    esac

  return  1  ;  }


lib_download  ()  {    #  --------------------------------------  lib_download
  #  usage:  lib_download  url  path
  local  url="$1"  path="$2"
  [ -e "$path" ]  &&  return
  trace_mkdir_p_dirname  "$path"
  trace  wget  --no-clobber  "$url"  -O "$path"  ;  }


lib_download_grep_aria  ()  {    #  ------------------  lib_download_grep_aria

  #  usage:  lib_download_grep_aria

  local  line  prev
  while  read  line  ;  do
    case  "$line"  in

      ('');;
      ("$prev");;
      ('FILE: '*);;
      ('========'*);;
      ('--------'*);;
      (*' - Redirecting to '*);;
      (*' - Download aborted. URI='*);;
      ('Exception: [AbstractCommand.cc:'*);;
      ('*** Download Progress Summary as of '*);;
      ('-> [HttpResponse.cc:'*'] errorCode='*' Invalid range header. '*);;
      ('-> [SocketCore.cc:'*'] errorCode='*' SSL/TLS handshake failure: '*);;
      ('-> [HttpSkipResponseCommand.cc:'*'] errorCode=3 Resource not found');;

      (*)  echo  "$line"  ;  prev="$line"  ;;  esac  ;  done  }


lib_download_multi  ()  {    #  --------------------------  lib_download_multi

  #  usage:  lib_download_multi  seeds  src_path  dest_path

  local  seeds="$1"  src_path="$2"  dest_path="$3"

  [ -e "$dest_path" ]  &&  return

  aria2c_install

  local  dest_dir="${dest_path%/*}"  seed
  trace_mkdir_p  "$dest_dir"

  local  urls="$(
    for  seed  in  $seeds  ;  do  echo  "${seed%/20*}/$src_path"  ;  done  )"

  echo  ;  echo  "lib_download_multi  seeds(${#seeds})  $src_path  ..."

  "$aria2c"  --dir="$dest_dir"  --split=40  --min-split-size=1M  \
      --summary-interval=1  $urls  |  lib_download_grep_aria  ;  }


lib_verify  ()  {    #  ------------------------------------------  lib_verify

  #  usage:  lib_verify  [-v]  path  expect  algo  [opts]

  local  verbose=''
  if  [ "$1" = '-v' ]  ;  then  verbose=1  ;  shift  ;  fi
  local  path="$1"  expect="$2"  algo="$3"  ;  shift  3

  if  [ ! -x "$( which2 "$algo" )" ]  ;  then
    case  "$algo"  in  ( b2sum | sha3sum )  return  ;;  esac
    echo  "vland  error  lib_verify  algo not found  '$algo'"
    exit  1  ;  fi

  if  [ "$verbose" = '1' ]  ;  then  echo  "$algo  $path"  ;  fi
  local  actual
  actual=`  "$algo"  "$@"  "$path"  `
  actual="${actual%% *}"

  if  [ ! "$actual" = "$expect" ]  ||  [ "$verbose" = '1' ]  ;  then
    local  realpath="$(  realpath  "$path"  )"
    echo  "verify    $algo  $path"
    echo  "  expect  $expect"
    echo  "  actual  $actual"
    #  busybox stat lacks '--dereference'
    #  busybox stat lacks '--format' but has '-c'
    echo  "  size    $(  stat  -c '%s'  "$realpath"  )"
    fi

  if  [ "$actual" = "$expect" ]  ;  then  return  ;  fi
  echo  "verify  failed  exiting..."
  exit  1  ;  }


lxroot_install  ()  {    #  ----------------------------------  lxroot_install

  #  usage:  lxroot_install

  [ "$lxroot" ]  &&  return

  [ "$( which2 lxroot )" ]  &&  {  readonly  lxroot='lxroot'  ;  return  ;  }

  local  lxr_ver='0.22.0'
  local  url_base='https://github.com/parke/lxroot/releases/download'
  local  url="$url_base/$lxr_ver/lxroot-x86"
  local  path="$vland_dir/dist/bin/lxroot-x86"
  local  md5='04821ce1b8a69b8a26b6f9f39c3faa17'
  local  sha='b29ecc05c6b1fb1f525b8687567820ce28a4eea7fb0b187d9e4927c0de4590e5'
  local  sha3='e45d01daae157ff65110872790618168a2b9391897e6021043f0471c'
  local  b2='7acf5a46d81cd72db2e6bf88e3199fe5d5a9503409990757a8cf678fedb83a77'

  lib_download  "$url"  "$path"
  lib_verify    "$path"  "$md5"   md5sum
  lib_verify    "$path"  "$sha"   sha256sum
  lib_verify    "$path"  "$sha3"  sha3sum
  lib_verify    "$path"  "$b2"    b2sum  -l 256

  chmod  +x  "$path"
  readonly  lxroot="$path"
  return  ;  }


mute  ()  {    #  ------------------------------------------------------  mute
  "$@"  >/dev/null  2>/dev/null  &&  return
  local  status="$?"
  echo  "mute  error  $status  '$*'"  1>&2
  return  "$status"  ;  }


nl="$(  printf  '\n.'  )"    #  ------------------------------------------  nl
readonly  nl="${nl%.}"


pinwheel  ()  {    #  ----------------------------------------------  pinwheel
  local  line  n='0'
  echo  -n  '/ '
  while  read  line  ;  do
    case  "$n"  in
      ('0')  echo  -n  '\b\b- '  ;;
      ('1')  echo  -n  '\b\b\ '  ;;
      ('2')  echo  -n  '\b\b| '  ;;
      ('3')  echo  -n  '\b\b/ '  ;;
      (*)    echo  -n  '\b\bE '  ;;
      esac
    n="$(( ( n + 1 ) % 4 ))"
    done
  return  ;  }


resolv_conf_sync  ()  {    #  ------------------------------  resolv_conf_sync
  #  usage:  resolv_conf_sync  $guest/etc/resolv.conf
  if  [ -h "$1" ]  ;  then  trace  rm  "$1"  ;  fi
  if  cmp  --silent  /etc/resolv.conf  "$1"  ;  then  return  ;  fi
  trace  cp  /etc/resolv.conf  "$1"  ;  }


trace  ()  {    #  ----------------------------------------------------  trace
  echo  "+  $*"  1>&2  ;  "$@"  ;  }


trace_mkdir_p  ()  {    #  ------------------------------------  trace_mkdir_p
  #  usage:  trace_mkdir_p  path
  [ -d "$1" ]  &&  return
  trace  mkdir  -p  "$1"  ;  }


trace_mkdir_p_dirname  ()  {    #  --------------------  trace_mkdir_p_dirname
  #  usage:  trace_mkdir_p_dirname
  trace_mkdir_p  "${1%/*}"  ;  }


vland  ()  {    #  ----------------------------------------------------  vland
  [ -x "$VLAND_EXE" ]  &&  {  "$VLAND_EXE"  "$@"  ;  return  ;  }
  /bin/bash  "$VLAND_EXE"  "$@"  ;  }


which2  ()  {    #  --------------------------------------------------  which2
  #  usage:  which2  command
  local  path="$PATH"
  while  [ "$path" ]  ;  do
    local  dir="${path%%:*}"
    [ -x "$dir/$1" ]  &&  {  echo  "$dir/$1"  ;  return  ;  }
    [ "$dir" = "$path" ]  &&  return  1
    path="${path#*:}"  ;  done
  return  1  ;  }


xray  ()  {    #  ------------------------------------------------------  xray

  #  usage:  xray  function_name  [arg...]

  echo  "xray  $1"  ;  is_str  "$1"  &&  shift
  echo  "  args    args            '$*'  $#"
  echo  "  env     VLAND_GUEST     '$VLAND_GUEST'"
  echo  "          VLAND_OVERLAY   '$VLAND_OVERLAY'"
  echo  "  names   overlay_name    '$overlay_name'"
  echo  "          guest_name      '$guest_name'"
  echo  "          distro          '$distro'"
  echo  "  paths   vland_dir       '$vland_dir'"
  echo  "          vland_mnt       '$vland_mnt'"
  echo  "          overlay         '$overlay'"
  echo  "          overlay_home    '$overlay_home'"
  echo  "          guest           '$guest'"
  echo  "          dist_path       '$dist_path'"
  echo  "  real    vland_dir       '$(  realpath  -q  "$vland_dir"  )'"
  echo  "          overlay         '$(  realpath  -q  "$overlay"       )'"
  echo  "          guest           '$(  realpath  -q  "$guest"       )'"
  echo  "  binds   squash_binds    '$squash_binds'"
  echo  "  custom  custom_options  '$custom_opts'"  ;  }


#  pkg  -----------------------------------------------------------------  pkg


pkg_parse_aur  ()  {    #  ------------------------------------  pkg_parse_aur
  case  "$distro"  in
    ( arch )  distro='arch_aur'  ;;
    ( *    )  die  "vland --aur  invalid distro  '$distro'"  ;;  esac  }


pkg_parse  ()  {    #  --------------------------------------------  pkg_parse

  #  usage:  pkg  --pkg  overlay  action  package...

  config_overlay  "$2"
  distro_detect

  is_equal  "$distro"  'void-musl'  &&  distro='void'
  is_equal  "$1"       '--aur'      &&  pkg_parse_aur

  action="$3"
  case  "$action"  in
    ( update | install | deps | build | build_install | build_clean )  ;;
    ( build-install )  action='build_install'  ;;
    ( build-clean   )  action='build_clean'    ;;
    ( * )  die  "vland $1  invalid action  '$action'"  ;;  esac  }


pkg_sanity  ()  {    #  ------------------------------------------  pkg_sanity

  not_dir  "$guest"    && die "vland --pkg  guest not found  '$guest_name'"
  not_dir  "$overlay"  && die "vland --pkg  overlay not found  '$overlay_name'"

  case  "$distro"  in
    ( alpine | arch | arch_aur | void )  ;;
    ( * )  die  "vland --pkg  invalid distro  '$distro'"  ;;  esac

  case  "$action"  in
    ( update | install | upgrade | deps )  ;;
    ( build | build_install | build_clean )  ;;
    ( * )  die  "vland --pkg  invalid action  '$action'"  ;;  esac  ;  }


pkg_prelude  ()  {    #  ----------------------------------------  pkg_prelude

  #  20220118
  #  case  "$distro"  in  ( alpine | arch | arch_aur | void | void_musl )
    #  case  "$action"  in  ( update | install | deps | build | build_install )
    #    pkg_try  "$distro"_pkg_prepare  ;;  esac

  case  "$action"  in  ( update )
    "$distro"_pkg_update  ;;  esac

  case  "$action"  in  ( deps | build | build_install )
    "$distro"_pkg_build_prepare  ;;  esac  }


pkg_single  ()  {    #  ------------------------------------------  pkg_single
  #  usage:  pkg_single  --pkg  overlay  action  package...
  pkg_sanity  ;  shift  3
  case  "$action"  in  ( update | install | build_clean )
    "$distro"_pkg_"$action"  "$@"  ;;  esac  }


pkg_loop  ()  {    #  ----------------------------------------------  pkg_loop
  #  usage:  pkg_loop  --pkg  overlay  action  package...
  pkg_sanity  ;  shift  3
  while  [ "$1" ]  ;  do
    local  pkg="$1"  ;  shift
    case  "$action"  in  ( deps | build | build_install )
      "$distro"_pkg_deps  "$pkg"  ;;  esac
    case  "$action"  in  ( build | build_install )
      "$distro"_pkg_build  "$pkg"  ;;  esac
    case  "$action"  in  ( build_install )
      "$distro"_pkg_build_install  "$pkg"  ;;  esac
    case  "$action"  in  ( build_clean )
      "$distro"_pkg_build_clean  "$pkg"  ;;  esac  ;  done  }


pkg  ()  {    #  --------------------------------------------------------  pkg
  #  usage:  pkg  --pkg  overlay  action  package...

  not_str  "$2"  &&
    die  "usage:  vland  $1  overlay  action  package..."

  echo  ;  echo  "vland  $1  $2  $3  $4  (+$(( $# - 4 )))"
  local  action  shift
  pkg_parse    "$@"
  pkg_sanity
  pkg_prelude
  case  "$action"  in
    ( update | install )  pkg_single  "$@"  ;;
    ( *                )  pkg_loop    "$@"  ;;  esac  }


update  ()  {    #  --------------------------------------------------  update
  #  usage:  update  --update  overlay
  not_str  "$2"  &&  die  "usage:  vland  $1  overlay"
  config_overlay  "$2"
  distro_detect
  case  "$distro"  in
    ( arch )  arch_pkg_update  ;;
    ( *    )  die  "vland  update  unsupported distro  '$distro'"  ;;  esac
  return  ;  }


upgrade  ()  {    #  ------------------------------------------------  upgrade
  #  usage:  upgrade  --upgrade  overlay
  not_str  "$2"  &&  die  "usage:  vland  $1  overlay"
  config_overlay  "$2"
  distro_detect
  case  "$distro"  in
    ( arch )  arch_pkg_upgrade  ;;
    ( *    )  die  "vland  update  unsupported distro  '$distro'"  ;;  esac
  return  ;  }


#  snap  ---------------------------------------------------------------  snap


#  hint:  add the below lines to /etc/sudoers.d/vland
#         replace $user with the literal user name.
#    $user  ALL  =  \
#    /usr/bin/id  "",  \
#    /bin/btrfs  subv  snap  -r  /vland/$user/*  /vland/$user/snap/*


snap  ()  {    #  ------------------------------------------------------  snap

  #  usage:  snap  snap  guest_name  [suffix]

  #  first, create a read-only snapshot of $guest
  #    source  guest/${guest_name}
  #    dest    snap/${guest_name}/yyyy/mm/${guest_name}-yyyy.mmdd.hhmm[-$suf]

  #  then, create the symlink
  #    snap/head -> yyyy/mm/$guest-yyyy.mmdd.hhmm[-$suffix]

  local  guest_name="$2"  suffix="$3"
  local  guest="$vland_dir/guest/$guest_name"

  not_str  "$guest_name"  &&  die  "vland  invalid guest  '$guest_name'"
  not_dir  "$guest"       &&  die  "vland  guest not found  '$guest'"
  is_str   "$suffix"      &&  suffix="-$suffix"

  local  date="$(  date  '+%Y/%m  %Y.%m%d.%H%M'  )"
  local  dir1="$vland_dir/snap/$guest_name"
  local  dir2="${date%  *}"
  local  dir3="${guest_name}-${date#*  }${suffix}"
  local  dest="$dir1/$dir2/$dir3"

  trace_mkdir_p  "$dir1/$dir2"

  echo
  echo  'vland  snap'
  echo  "  guest  '$guest'"
  echo  "  dest   '$dest'"

  echo_trace  sudo  -k  /bin/btrfs  subv  snap  -r  "$guest"  "$dest"

  trace  ln  -snf  "$dir2/$dir3"  "$dir1/head"

  return  ;  }


snap_save  ()  {    #  --------------------------------------------  snap_save

  #  usage:  snap_save  snap_save  guest  name

  #  first, create a read-only copy of the head snapshot
  #    source  snap / $guest / head
  #    dest    snap / $guest / save / $guest-yyyy.mmdd.hhmm-$name

  #  then, create the symlink
  #    snap / $guest / save / $name  ->  $guest-yyyy.mmdd.hhmm-$name

  local  guest_name="$2"  name="$3"
  local  head="$vland_dir/snap/$guest_name/head"
  local  save="$vland_dir/snap/$guest_name/save"

  not_str  "$guest_name"  &&  die  "vland  invalid guest  '$guest_name'"
  not_dir  "$head"        &&  die  "vland  head not found  '$head'"

  local  source="$(  realpath  "$head"  )"

  local  chop="${source%.*}"
  local  hhmm_suffix="${source##*.}"
  local  hhmm="${hhmm_suffix%-*}"
  local  dest_name="${chop##*/}.${hhmm}-${name}"

  local  dest="$save/$dest_name"

  trace_mkdir_p  "$save"

  echo
  echo  'vland  snap_save'
  echo  "  source  '$source'"
  echo  "  dest    '$dest'"

  is_dir  "$dest"  &&  echo_die  'error  dest already exists!'

  echo_trace  sudo  -k  /bin/btrfs  subv  snap  -r  "$source"  "$dest"

  trace  ln  -snf  "$dest_name"  "$save/$name"

  return  ;  }


snap_copy  ()  {    #  --------------------------------------------  snap_copy

  #  usage:  snap_copy  snap_copy  guest  dest

  #  todo  create a writable snapshot of guest/$guest at guest/$dest

  echo  ;  echo  "vland  snap_copy  '$*'"
  die  'vland  snap_copy  not implemented'

  return  ;  }


#  squash  -----------------------------------------------------------  squash


squash_active_find  ()  {    #  --------------------------  squash_active_find
  #  usage:  squash_detect_active  rel_dir
  local  dir="${squash}${1#.}"
  is_link  "$dir"/active  &&
    {  active="$dir/$(  readlink  "$dir/active"  )"  ;  return  ;  }
  local  path  found  ;  for  path  in  "$dir"/*  ;  do
    not_exists  "$path"   &&  continue    #  wildcard failed to match
    is_dir      "$path"   &&  continue    #  skip directories
    is_str      "$found"  &&  die  "vland  error  multiple files  '$dir'"
    found="$path"  ;  done
  active="$found"  ;  }


squash_mount_app  ()  {    #  ------------------------------  squash_mount_app

  #  usage:  squash_mount_sfs  src  dst

  local  src="$1"  dst="$2"

  #s_mountpoint  "$dst"  &&  echo  "app  found  ${dst##*/}"
  is_mountpoint  "$dst"  &&  return

  echo  ;  echo  "squash_mount_app  '$src'"

  local  grep="$(
    grep  --byte-offset  --only-matching  --text 'hsqs'  "$src"  )"

  local  match  offset
  for  match  in  $grep  ;  do
    echo  "squash_mount_app  match  '$match'"
    case  "$match"  in
      ( '188392:hsqs' )  offset=188392  ;;  esac  ;  done

  not_str  "$offset"  &&  die  'vland  offset detection faild'

  echo  "squash_mount_app  offset  '$offset'"
  trace_mkdir_p  "$dst"
  echo_trace  sudo  -k  mount  -o offset="$offset"  "$src"  "$dst"  ;  }


squash_mount_sfs  ()  {    #  ------------------------------  squash_mount_sfs
  #  usage:  squash_mount_sfs  src  dst
  local  src="$1"  dst="$2"
  #s_mountpoint  "$dst"  &&  echo  "sfs  found  ${dst##*/}"
  is_mountpoint  "$dst"  &&  return
  echo  ;  echo  "squash_mount_sfs  '$src'"
  trace_mkdir_p  "$dst"
  echo_trace  sudo  -k  mount  "$src"  "$dst"  ;  }


squash_has_bindpoint  ()  {    #  ----------------------  squash_has_bindpoint
  #  usage  squash_has_bindpoint  dir_relative
  is_equal    "$rel"  '.'       &&  return
  is_dir      "$overlay${1#.}"  &&  return
  not_dir  "$guest"          &&  return  1
  is_dir      "$guest${1#.}"    &&  return
  return  1  ;  }


squash_bind  ()  {    #  ----------------------------------------  squash_bind
  #  usage:  squash_bind  src  dir_relative
  local  src="$1"  rel="$2"  dst
  case  "$rel"  in
    ( '.' )  dst='/'  ;;
    ( *   )  dst="${rel#.}"  ;;  esac
  squash_binds="$squash_binds  ${nl}bind  ra  $dst  $src"  ;  }


squash_detect_dir  ()  {    #  ----------------------------  squash_detect_dir

  #  usage:  squash_detect_dir  dir_relative

  not  squash_has_bindpoint  "$1"  &&  {  echo  "skip  '$1'"  ;  return  ;  }

  local  dir_relative="$1"
  local  active  ;  squash_active_find  "$dir_relative"
  local  mountpoint="$vland_mnt/${active##*/}"
  local  bind_to="$dir_relative"
  local  dst_guest="$(  echo  "${guest}${dir_relative#.}"  )"
  local  dst_overlay="$(  echo  "${overlay}${dir_relative#.}"  )"

  not_file  "$active"  &&  return

  false  &&  {
    echo
    echo  "  squash  found"
    echo  "    active        '$active'"
    echo  "    mountpoint    '$mountpoint'"
    echo  "    dir_relative  '$dir_relative'"
    echo  "    dst_guest     '$dst_guest'"
    echo  "    dst_overlay   '$dst_overlay'"  ;  }

  case  "$active"  in
    ( *.AppImage )  squash_mount_app  "$active"  "$mountpoint"  ;;
    ( *.sfs      )  squash_mount_sfs  "$active"  "$mountpoint"  ;;
    ( *          )  die  "vland  cannot mount  '$active'"  ;;  esac

  case  "$dir_relative"  in
    ( '.' )  guest="$mountpoint"  ;;
    ( *   )  squash_bind  "$mountpoint"  "$dir_relative"  ;;
    esac

  return  0  ;  }


squash_detect  ()  {    #  ------------------------------------  squash_detect
  #  usage:  squash_detect
  squash="$vland_dir"/squash/"$overlay_name"
  not_dir  "$squash"  &&  return
  local  dir  ;  for  dir  in  `cd  "$squash"  &&  find  .  -type d`
    do  squash_detect_dir  "$dir"  ;  done  ;  }


#  distro  ===========================================================  distro




#  alpine  -----------------------------------------------------------  alpine


alpine_vars_set  ()  {    #  --------------------------------  alpine_vars_set

  #  usage:  alpine_vars_set

  tgz_ver='3.15.0'
  tgz_url="https://dl-cdn.alpinelinux.org/alpine/v${tgz_ver%.*}"
  tgz_url="$tgz_url/releases/x86_64/alpine-minirootfs-${tgz_ver}-x86_64.tar.gz"
  tgz="${tgz_url##*/}"

  tgz_sha256='ec7ec80a96500f13c189a6125f2dbe8600ef593b87fc4670fe959dc02db727a2'
  tgz_b2='a67c1a7c7307534345946211f44a4e0bb5278b8eaccc1a2d3aa9f96b992da8f1'

  dist_path="$vland_dir/dist/alpine/${tgz}"  ;  }


alpine_download  ()  {    #  --------------------------------  alpine_download
  #  usage:  alpine_download
  [ -e "$dist_path" ]  &&  return
  echo  ;  echo  'alpine_download'
  alpine_vars_set
  lib_download  "$tgz_url"  "$dist_path"  ;  }


alpine_verify  ()  {    #  ------------------------------------  alpine_verify
  #  usage:  alpine_verify
  echo  ;  echo  "alpine_verify  $dist_path"
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256
  echo  'alpine_verify  done'  ;  }


alpine_extract  ()  {    #  ----------------------------------  alpine_extract
  #  usage:  alpine_extract
  guest_exists  &&  die  "vland  error  guest already exists  '$guest'"
  alpine_download
  alpine_verify
  echo  ;  echo  'alpine_extract'
  trace  mkdir  -p  "$guest"
  trace  tar  xzf "$dist_path"  -C "$guest"  ;  }


alpine_configure  ()  {    #  ------------------------------  alpine_configure
  trace  resolv_conf_sync  "$guest"/etc/resolv.conf
  return  ;  }


alpine_create  ()  {    #  ------------------------------------  alpine_create
  #  usage:  alpine_create
  alpine_vars_set
  alpine_extract
  alpine_configure
  echo  ;  echo  'vland  alpine_create  done'  ;  }


#  alpine_build  -----------------------------------------------  alpine_build


alpine_pkg_prepare_aports  ()  {    #  ------------  alpine_pkg_prepare_aports

  #  usage:  self

  local  url='https://gitlab.alpinelinux.org/alpine/aports/-/archive/master'
  local  url="$url/aports-master.tar.bz2"

  local  tbz="${url##*/}"
  local  tbz_path="$overlay_home/$tbz"
  local  aports="$overlay_home/aports"

  [ -e "$tbz_path" ]  &&  echo  "alpine_pkg_prepare_aports  found  '$tbz_path'"
  lib_download  "$url"  "$tbz_path"

  if  [ -e "$overlay_home"/aports ]
    then  echo  "alpine_pkg_prepare_aports  found  '$overlay_home/aports'"
    else  trace  tar  xjf "$tbz_path"  -C "$overlay_home"
          trace  mv  "$overlay_home"/aports-master  "$overlay_home"/aports
          fi  ;  }


alpine_pkg_prepare_keygen  ()  {    #  ------------  alpine_pkg_prepare_keygen
  #  usage:  self
  local  conf="$overlay/$HOME"/.abuild/abuild.conf
  is_file  "$conf"  &&
    {  echo  "alpine_pkg_prepare_keygen  found  '$conf'"  ;  return  ;  }
  vland  "$overlay_name"  --  abuild-keygen  --append  -n
  trace  cp  "$overlay/$HOME"/.abuild/*.rsa.pub  "$guest"/etc/apk/keys/  ;  }


alpine_pkg_prepare_sdk  ()  {    #  ------------------  alpine_pkg_prepare_sdk
  #  usage:  self
  local  abuild_path="$guest/usr/bin/abuild"
  if  is_file  "$abuild_path"
    then  echo  "alpine_pkg_prepare_sdk  found  '$abuild_path'"
    else  trace  lxr  -nr  --  apk  update
          trace  lxr  -nr  --  apk  add  alpine-sdk  ;  fi
  #  redirect symlinks to remove abuild privilege escalation
  ln  -sf  '/usr/sbin/addgroup'  "$guest/usr/bin/abuild-addgroup"
  ln  -sf  '/usr/sbin/adduser'   "$guest/usr/bin/abuild-adduser"
  ln  -sf  '/sbin/apk'           "$guest/usr/bin/abuild-apk"  ;  }


alpine_pkg_update  ()  {    #  ----------------------------  alpine_pkg_update
  lxr  -nr  --  apk  update  ;  }


alpine_pkg_install  ()  {    #  --------------------------  alpine_pkg_install
  trace  lxr  -nr  --  apk  add  "$@"  ;  }


alpine_pkg_build_prepare  ()  {    #  --------------  alpine_pkg_build_prepare
  alpine_pkg_prepare_sdk
  alpine_pkg_prepare_keygen
  alpine_pkg_prepare_aports  ;  }


alpine_pkg_port_find  ()  {    #  ----------------------  alpine_pkg_port_find
  #  usage:  alpine_pkg_port_find  package_name
  local  pwd="$PWD"
  cd  "$overlay_home"
  ls  -d  aports/*/"$1"  2>/dev/null
  cd  "$pwd"  ;  }


alpine_pkg_deps  ()  {    #  --------------------------------  alpine_pkg_deps
  #  usage:  alpine_pkg_deps  package_name
  local  port="$(  alpine_pkg_port_find  "$1"  )"
  [ -z "$port" ]  &&  die  "vland --pkg  package not found  '$1'"
  trace  lxr  -nw  cd "$port"  --  abuild  deps  ;  }


alpine_pkg_build  ()  {    #  ------------------------------  alpine_pkg_build
  #  usage:  alpine_pkg_build  package_name
  local  port="$(  alpine_pkg_port_find  "$1"  )"
  [ -z "$port" ]  &&  die  "vland --pkg  package not found  '$1'"
  trace  lxr  -nw  cd "$port"  --  abuild  fetch
  trace  lxr  wd /var/cache/distfiles  cd "$port"  --  abuild  ;  }


alpine_pkg_find  ()  {    #  --------------------------------  alpine_pkg_find
  #  usage:  alpine_pkg_port_find  package_name
  local  pwd="$PWD"
  cd  "$overlay_home"
  find  packages  -name  "$1"'-*.apk'
  cd  "$pwd"  ;  }


alpine_pkg_build_install  ()  {    #  --------------  alpine_pkg_build_install
  #  usage:  alpine_pkg_build  package_name
  local  pkgs="$(  alpine_pkg_find  "$1"  )"
  trace  lxr  -r  cd "$HOME"  --  apk  --force-non-repository  add  $pkgs  ;  }


#  apt  -----------------------------------------------------------------  apt


#  essentail packages
#
#  dpkg  --unpack <any>  requires:
#    diff      ->  /usr/bin/diff    ->  diffutils
#    ldconfig  ->  /sbin/ldconfig   ->  libc-bin
#    rm        ->  /bin/rm          ->  coreutils
#    sh        ->  /bin/sh          ->  dash
#
#  dpkg  --unpack libc  requires:
#    sed       ->  /bin/sed         ->  sed
#
#  dpkg  --configure dash  requires:
#    awk       ->  /usr/bin/awk     ->  mawk (must be configured!)
#
#  dpkg  --configure passwd  requires:
#    grep      ->  /bin/grep        ->  grep
#
#  apt-get  update  requires:  ( without find, yields gpg errors !?! )
#    find      ->  /usr/bin/find    ->  findutils
#
#  fakeroot  uses getopt:
#    getopt    ->  /usr/bin/getopt  ->  util-linux
#
#  note:  dash requires debconf.  debconf recommends apt-utils.
#
#  idea:  consider using busybox-static instead ???


#  phase_1
#
phase_1=(  mawk  )    #  we must configure mawk before installing dash.


#  phase_2
#
phase_2=(  dpkg  coreutils  dash  diffutils  findutils  grep  libc-bin  sed  )
#
phase_2+=(  util-linux  )    #  /usr/bin/getopt    for fakeroot
phase_2+=(  fakeroot    )    #  we use fakeroot.
phase_2+=(  gzip        )    #  /usr/bin/zcat      for various
phase_2+=(  login       )    #  /usr/sbin/nologin  for various


#  phase 3
#
#    note:  phase 3 is not required, but is installed for convenience.
#    note:  we install bash *after* dash to avoid a configuration prompt.
#
phase_3=(  bash  less  ncurses-base  ncurses-bin  )


apt_clean  ()  {    #  --------------------------------------------  apt_clean

  local  actual="$(  realpath  "$guest"  )"

  local  archives="$actual"/var/cache/apt/archives
  local  lists="$actual"/var/lib/apt/lists
  local  save="$actual"/../clean_save

  ee  clean

  mkdir_p  "$save"
  is_dir   "$lists"     &&  trace  mv  "$lists"     "$save"
  is_dir   "$archives"  &&  trace  mv  "$archives"  "$save"

  is_dir   "$actual"   &&  ask  rm  -rf  "$actual"

  mkdir_p  "$(  dirname  "$archives"  )"
  mkdir_p  "$(  dirname  "$lists"     )"

  is_dir  "$save"/archives  &&  trace  mv  "$save"/archives  "$archives"
  is_dir  "$save"/lists     &&  trace  mv  "$save"/lists     "$lists"

  echo  ;  }


e_group  ()  {    #  ------------------------------------------------  e_group

  local  group="$(  id  -gn  )"
  local  gid="$(    id  -g   )"

  #  (gid)  (group)   (required by)
  #  0      root      ??
  #  5      tty       bsdutils
  #  8      mail      ??
  #  12     man       man-db  ( audacious )
  #  30     dip       ppp(?)  ( audacious )
  #  42     shadow    libpam-modules-bin    ( phase n? )
  #  43     utmp      ??
  #  50     staff     ??
  #  65534  nogroup   adduser  --system  uuidd

  echo  'root:x:0:'
  echo  'tty:x:5:syslog'
  echo  'mail:x:8:'
  echo  'man:x:12:'
  echo  'dip:x:30:'
  echo  'shadow:x:42:'
  echo  'utmp:x:43:'
  echo  'staff:x:50:'
  echo  'nogroup:x:65534:'
  echo  "$group:x:$gid"  ;  }


e_passwd  ()  {    #  ----------------------------------------------  e_passwd

  local  user="$(  id  -un  )"
  local  uid="$(   id  -u   )"
  local  gid="$(   id  -g   )"

  #  20201223  the dbus package may create the messagebus user for us.
  #  messagebus:x:106:

  #  (uid)  (user)    (required by)
  #  0      root       ??
  #  6      man        man-db

  echo  'root:x:0:0:root:/root:/bin/bash'
  echo  'man:x:6:12:man:/var/cache/man:/usr/sbin/nologin'
  echo  "$user:x:$uid:$gid::/home/$user:/bin/bash"  ;  }


e_resolv  ()  {    #  ----------------------------------------------  e_resolv
  cat  /etc/resolv.conf  ;  }


e_sources  ()  {    #  --------------------------------------------  e_sources

  #  20220808  hardcoded, at least for now.

  local  archive='http://archive.ubuntu.com/ubuntu/'
  local  archive='http://us.archive.ubuntu.com/ubuntu/'
  local  archive='http://ftp.osuosl.org/pub/ubuntu/'
  local  security='http://security.ubuntu.com/ubuntu/'
  local  suite='jammy'
  local  comps='main  restricted  universe  multiverse'

  echo  \
"#  This sources.list file was automatically generated by vland.sh.

deb      $archive   $suite            $comps
deb-src  $archive   $suite            $comps
deb      $archive   $suite-updates    $comps
deb-src  $archive   $suite-updates    $comps
deb      $archive   $suite-backports  $comps
deb-src  $archive   $suite-backports  $comps
deb      $security  $suite-security   $comps
deb-src  $security  $suite-security   $comps"

  return  ;  }


apt_file  ()  {    #  ----------------------------------------------  apt_file
  #  usage:  fn  path

  local  fn="$1"  path="${guest}${2}"
  is_file  "$path"  &&  return
  case  "$fn"  in
    ( '' )  trace  touch  "$path"  ;;
    ( *  )  "$fn"  |  trace  dd  of="$path"  ;;  esac  }


apt_init_etc  ()  {    #  --------------------------------------  apt_init_etc

  local  etc="$guest"/etc

  not_dir  "$etc"/apt/trusted.gpg.d  &&
    et  rsync  -aL  /etc/apt/trusted.gpg.d  "$etc"/apt/

  apt_file  e_passwd   /etc/passwd
  apt_file  e_group    /etc/group
  apt_file  e_resolv   /etc/resolv.conf
  apt_file  e_sources  /etc/apt/sources.list
  apt_file  ''         /var/lib/dpkg/status  ;  }


apt_init_mkdir  ()  {    #  ----------------------------------  apt_init_mkdir

  local  dirs=(
    bin
    dev
    etc/apt/apt.conf.d
    etc/apt/preferences.d
    etc/apt/sources.list.d
    proc
    run
    sys
    tmp
    usr/bin
    usr/sbin
    usr/local/bin
    #  usr/local/share/lua/5.3
    var/cache/apt/archives/partial
    var/lib/apt/lists/partial
    var/lib/dpkg
    var/lib/dpkg/info
    var/lib/dpkg/updates
    var/log  )

  local  dir  ;  for  dir  in  "${dirs[@]}"  ;  do
    mkdir_p  "$guest/$dir"  ;  done  }


apt_init  ()  {    #  ----------------------------------------------  apt_init
  apt_init_mkdir
  apt_init_etc
  return  ;  }


apt_download  ()  {    #  --------------------------------------  apt_download

  ee  download

  local  apt_opts=(
    -o=Dir="$guest"
    -o=Dir::State::status="$guest"/var/lib/dpkg/status  )

  not_file  "$guest"/var/lib/apt/lists/*_InRelease  &&
    et  apt-get  update  "${apt_opts[@]}"

  et  apt-get  install  --download-only  --yes  "${apt_opts[@]}"  \
    "${phase_1[@]}"  "${phase_2[@]}"  "${phase_3[@]}"  ;  }


apt_extract_which  ()  {    #  ----------------------------  apt_extract_which
  mkdir_p  "$guest"/etc/alternatives
  trace  ln  -s  /usr/bin/which.debianutils  "$guest"/etc/alternatives/which
  trace  ln  -s  /etc/alternatives/which     "$guest"/usr/bin/which  ;  }


apt_extract_dpkg  ()  {    #  ------------------------------  apt_extract_dpkg
  local  archives="$guest"/var/cache/apt/archives
  local  line  ;  while  read  line  ;  do
    set  --  $line
    not_equal  "$1"  Inst  &&  continue
    local  pkg="$2"
    local  arch="${line%])*}"  ;  arch="${arch##* [}"
    #  20220808
    #  echo
    #  echo  "$line"
    #  echo  "  pkg   '$pkg'"
    #  echo  "  arch  '$arch'"
    #  ls  "$guest"/var/cache/apt/archives/"${pkg}_"*.deb
    local  deb  ;  for  deb  in  "$archives"/"$pkg"_*_"$arch".deb  ;  do
      is_file  "$deb"  &&  trace  dpkg  --extract  "$deb"  "$guest"
      done  ;  done  ;  return  0  ;  }


apt_extract  ()  {    #  ----------------------------------------  apt_extract
  is_file  "$guest"/bin/bash  &&  {  ee  'extract  skip'  ;  return  ;  }
  ee  extract  ;  echo
  local  apt_get=(
    apt-get
      -o=Dir="$guest"
      -o=Dir::State::status="$guest"/var/lib/dpkg/status  )
  local  pkgs=(  "${phase_1[@]}"  "${phase_2[@]}"  )
  et  "${apt_get[@]}"  install  --simulate  "${pkgs[@]}"  |  apt_extract_dpkg
  apt_extract_which
  return  0  ;  }


apt_install  ()  {    #  ----------------------------------------  apt_install
  local  apt_install=(
    et  lxroot  -nw  "$guest"  FAKEROOTDONTTRYCHOWN=1
      --  fakeroot-sysv  apt-get  install  --yes  )
  "${apt_install[@]}"  "${phase_1[@]}"
  "${apt_install[@]}"  "${phase_2[@]}"
  "${apt_install[@]}"  "${phase_3[@]}"
  return  ;  }


apt_steam  ()  {    #  --------------------------------------------  apt_steam
  #  usage:  apt_steam  --steam  overlay
  config_overlay  "$2"
  et  lxroot  -r  "$guest"  --  dpkg  --add-architecture  i386
  local  apt_get=(
    et  lxroot  -nw  "$guest"  FAKEROOTDONTTRYCHOWN=1
      --  fakeroot-sysv  apt-get  )
  "${apt_get[@]}"  update
  "${apt_get[@]}"  install  --yes  gzip    #  It seems we need /usr/bin/zcat.
  "${apt_get[@]}"  install  --yes  steam
  return  ;  }


apt_create  ()  {    #  ------------------------------------------  apt_create
  local  mode='prod'
  case  "$mode"  in
    ( devel )  apt_clean  ;;
    ( prod  )  assert_guest_does_not_exist  ;;
    ( *     )  die  "apt_create  error  bad mode  '$mode'"  ;;  esac
  apt_init
  apt_download
  apt_extract
  apt_install
  return  ;  }


#  arch  ---------------------------------------------------------------  arch


arch_vars_set  ()  {    #  ------------------------------------  arch_vars_set

  #  20220809  retired
  #
  #  tgz_ver='2022.05.01'
  #  tgz_md5='8b26e3e98c686893963c60d7dca1ff10'
  #  tgz_sha1='d4958b7d38fbc2f659771bd76cab9906b03b8147'
  #gz_sha256='65d219da4a362ab1c3ee387a522060e91cf13dc558075a0b44a15e1f8c60f8de'
  #  tgz_b2='c109854250c3fed4465423b6453c9cc43590b6321cb667d62dc455165a5ab69c'

  tgz_ver='2022.08.05'
  tgz_md5='84ff3f2ce43eafeb43b1d6c655dc6845'
  tgz_sha1='fab68a07afc5ec44ef79a9051c0a57014c6561bf'
  tgz_sha256='9f1b1ae19eedcb82664eb47a66e6290758f3b64c92f0f6aca722b9c48ab167aa'
  tgz_b2='9e8d9b4977c4a8df5b4f3650daee4682fa0696b5c78c6e73ac6b52b5ff9425da'

  tgz="archlinux-bootstrap-${tgz_ver}-x86_64.tar.gz"
  dist_path="$vland_dir/dist/arch/$tgz"
  mirror='https://mirror.sfo12.us.leaseweb.net'
  mirror="Server = ${mirror}/archlinux/\$repo/os/\$arch"

  return  ;  }


arch_download  ()  {    #  ------------------------------------  arch_download
  #  usage:  arch_download
  arch_vars_set
  echo  "arch_download   dist_path  '$dist_path'"
  lib_download_multi  "$arch_web_seeds"  "$tgz_ver/$tgz"  "$dist_path"
  echo  "arch_download   done"  ;  }


arch_verify  ()  {    #  ----------------------------------------  arch_verify
  #  usage:  arch_verify
  arch_vars_set
  echo  "arch_verify     dist_path  '$dist_path'"
  lib_verify  "$dist_path"  "$tgz_md5"       md5sum
  lib_verify  "$dist_path"  "$tgz_sha1"      sha1sum
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256
  echo  'arch_verify     done'  ;  }


arch_tar_failed  ()  {    #  --------------------------------  arch_tar_failed
  echo  ;  echo  'vland  error in arch_extract'
  local  tar="$(  readlink  $(  which2  tar  )  )"
  echo
  echo    '/==========================================================\'
  echo    '|                                                          |'
  echo    '|  vland  error                                            |'
  echo    '|                                                          |'
  echo    "|  'tar xzf'  failed in arch_extract.                      |"
  case  "$tar"  in  ( */busybox )
  echo    '|                                                          |'
  echo    '|  busybox tar detected.                                   |'
    echo  '|  arch_extract requires features that busybox tar lacks.  |'
    echo  "|  please install the 'tar' package and try again.         |"
    esac
  echo    '|                                                          |'
  echo    '\==========================================================/'
  echo
  trace  rmdir  "$guest"
  exit  1  ;  }


arch_extract  ()  {    #  --------------------------------------  arch_extract

  #  usage:  arch_extract

  guest_exists  &&  die  "vland  error  guest already exists  '$guest'"

  arch_download
  arch_verify

  echo  'arch_extract    begin'
  trace  mkdir  -p  "$guest"
  local  opts='--delay-directory-restore  --strip-components=1'
  trace  tar  xzf "$dist_path"  -C "$guest"  $opts  ||  arch_tar_failed
  trace  chmod  u+w  "$guest/etc/ca-certificates/extracted/cadir"
  echo  'arch_extract    done'

  return  ;  }


arch_configure  ()  {    #  ----------------------------------  arch_configure

  #  usage:  arch_configure

  lxroot_install

  echo  'arch_configure  begin'

  #  20211219  todo  copy localtime from host rather than using Los_Angeles?

  trace  resolv_conf_sync  "$guest"/etc/resolv.conf
  trace  ln  -snf  /usr/share/zoneinfo/America/Los_Angeles  \
    "$guest"/etc/localtime

  echo  "$mirror"  \
    |  trace  dd  of="$guest"/etc/pacman.d/mirrorlist  status=none

  trace  lxr  -nr  --  pacman-key  --init
  trace  lxr  -nr  --  pacman-key  --populate  archlinux

  echo  'arch_configure  done'  ;  }


arch_create  ()  {    #  ----------------------------------------  arch_create
  #  usage:  arch_create
  echo  'arch_create     begin'
  arch_vars_set
  arch_extract
  arch_configure
  echo  'arch_create     done'  ;  }


#  arch_pkg  -------------------------------------------------------  arch_pkg


#  pacman
#
#    -S    install packages
#    -Sy   refresh the package database, then install packages
#    -Su   upgrade out of date packages
#    -Syu  refresh the package database, then upgrade out of date packages
#
#    -U    upgrade (or add) package(s) FROM A FILE OR URL
#
#    --needed       skip reinstall
#    --noconfirm    skip confirmation
#    --refresh      refresh the package database


arch_pkg_find  ()  {    #  ------------------------------------  arch_pkg_find
  #  usage:  arch_pkg_find  package_name
  local  cwd="$PWD"
  cd  "$overlay_home"/vland-build/"$1"/trunk
  ls  *.pkg.tar.zst
  cd  "$cwd"  ;  }


arch_pkg_makepkg_conf  ()  {    #  --------------------  arch_pkg_makepkg_conf
  local  conf="$overlay_home"/.makepkg.conf
  [ -e "$conf" ]  ||  echo  'PACMAN_AUTH=(  unshare  -r  )'  >  "$conf"  ;  }


arch_pkg_pacman_S  ()  {    #  ----------------------------  arch_pkg_pacman_S
  local  asp="$guest"/usr/bin/asp
  # -e "$asp" ]  &&  echo  "arch_build  found  '$asp'"
  [ -e "$asp" ]  &&  return
  trace  lxr  -nr  --  pacman  -Sy  --noconfirm  base-devel  asp  ;  }


arch_pkg_update  ()  {    #  --------------------------------  arch_pkg_update
  trace  lxr  -nr  --  pacman  -Sy  ;  }


arch_pkg_upgrade  ()  {    #  ------------------------------  arch_pkg_upgrade
  trace  lxr  -nr  --  pacman  -Su  ;  }


arch_pkg_install  ()  {    #  ------------------------------  arch_pkg_install
  trace  lxr  -nr  --  pacman  -Sy  --needed  --noconfirm  "$@"  ;  }


arch_pkg_build_prepare  ()  {    #  ------------------  arch_pkg_build_prepare
  arch_pkg_makepkg_conf
  arch_pkg_pacman_S  ;  }


arch_pkg_deps  ()  {    #  ------------------------------------  arch_pkg_deps
  #  usage:  arch_pkg_deps  package_name
  local  build="$overlay_home"/vland-build
  is_dir  "$build/$1"  &&  {
    echo  "arch_pkg_deps   found dir  'vland-build/$1'"  ;  return  ;  }
  trace_mkdir_p  "$build"
  trace  lxr  -n   cd vland-build  --  asp  checkout  "$1"
  trace  lxr  -nw  cd vland-build/"$1"/trunk  \
    --  makepkg  --syncdeps  --noconfirm  --noextract  --nobuild  ;  }


arch_pkg_build  ()  {    #  ----------------------------------  arch_pkg_build
  #  usage:  arch_pkg_build_one  package_name
  local  found="$(  arch_pkg_find  "$1"  )"
  is_str  "$found"  &&  {
    echo  "arch_pkg_build  found pkg  '$found'"  ;  return  ;  }
  trace  \
    lxr  -n  cd vland-build/"$1"/trunk  \
      FAKEROOTDONTTRYCHOWN='1'  \
      --  makepkg  --skippgpcheck  ;  }


arch_pkg_build_install  ()  {    #  ------------------  arch_pkg_build_install
  #  usage:  arch_pkg_build_install  package_name
  local  pkgs="$(  arch_pkg_find  "$1"  )"
  [ -z  "$pkgs" ]  &&  {
    echo  'arch_build_install_package  strange, no packages found'
    return  ;  }
  trace  lxr  -r  cd "$HOME"/vland-build/"$1"/trunk  \
    --  pacman  -U  --needed  --noconfirm  $pkgs  ;  }


arch_pkg_build_clean  ()  {    #  ----------------------  arch_pkg_build_clean
  local  pkg="$overlay_home"/vland-build/"$1"/trunk/pkg
  local  src="$overlay_home"/vland-build/"$1"/trunk/src
  not_dir  "$overlay_home"  &&  return
  is_dir   "$pkg"           &&  trace  rm  -rf  "$pkg"
  is_dir   "$src"           &&  trace  rm  -rf  "$src"
  return  0  ;  }


#  arch_aur_pkg  -----------------------------------------------  arch_aur_pkg


arch_aur_find  ()  {    #  ------------------------------------  arch_aur_find
  #  usage:  arch_aur_find  package_name
  #  20220107  perhaps use 'find' instead of 'ls' ?
  local  cwd="$PWD"  dir="$overlay_home"/vland-build/"$1"
  [ -d "$dir" ]  ||  return
  cd  "$dir"  ;  ls  *.pkg.tar.zst  ;  cd  "$cwd"  ;  }


arch_aur_pkg_build_prepare  ()  {    #  ----------  arch_aur_pkg_build_prepare
  arch_pkg_build_prepare  ;  }


arch_aur_pkg_deps  ()  {    #  ----------------------------  arch_aur_pkg_deps

  #  usage:  arch_aur_pkg_deps  package_name

  local  package_name="$1"

  local  oh_vb="$overlay_home"/vland-build

  not_dir  "$oh_vb"  &&  trace  mkdir  -p  "$oh_vb"

  local  url='https://aur.archlinux.org/cgit/aur.git/snapshot'
  local  url="${url}/${package_name}.tar.gz"
  local  dst="aur-snapshot/${url##*/}"

  not_file  "${overlay_home}/${dst}"  &&
    trace  lxr  -n  \
      --  curl  --location  --create-dirs  --output "$dst"  "$url"

  #  20220729
  #
  ###  Can we detect whether the deps are already installed?
  #
  #  local  build="$overlay_home"/vland-build
  #  is_dir  "$build/$1"  &&  {
  #    echo  "arch_aur_pkg_deps   found dir  'vland-build/$1'"  ;  return  ;  }

  not_dir  "$overlay_home"/vland-build/"$package_name"  &&
    trace  lxr  --  tar  xzf "$dst"  -C vland-build

  #  20220213  note  '--noextract' may cause some aur packages to fail ...
  trace  lxr  -nw  cd vland-build/"$1"  \
    --  makepkg  --syncdeps  --noconfirm  --noextract  --nobuild  \
    &&  return

  #  20220213  ... therefore on failure try again without '--noextract'.
  trace  lxr  -nw  cd vland-build/"$1"  \
     --  makepkg  --syncdeps  --noconfirm  --nobuild  ;  }


arch_aur_pkg_build  ()  {    #  --------------------------  arch_aur_pkg_build
  #  usage:  arch_aur_pkg_build  package_name
  local  found="$(  arch_aur_find  "$1"  )"
  is_str  "$found"  &&  {
    echo  "arch_aur_pkg_build  found pkg  '$found'"  ;  return  ;  }
  trace  \
    lxr  -n  cd vland-build/"$1"  \
      FAKEROOTDONTTRYCHOWN='1'  \
      --  makepkg  --skippgpcheck  ;  }


arch_aur_pkg_build_install  ()  {    #  ----------  arch_aur_pkg_build_install
  #  usage:  arch_aur_pkg_build_install  package_name
  local  pkgs="$(  arch_aur_find  "$1"  )"
  [ -z  "$pkgs" ]  &&  {
    echo  'arch_aur_build_install_one  strange, no packages found'
    return  ;  }
  trace  lxr  -r  cd "$HOME"/vland-build/"$1"  \
    --  pacman  -U  --needed  --noconfirm  $pkgs  ;  }


arch_aur_pkg_build_clean  ()  {    #  --------------  arch_aur_pkg_build_clean
  local  pkg="$overlay_home"/vland-build/"$1"/pkg
  local  src="$overlay_home"/vland-build/"$1"/src
  not_dir  "$overlay_home"  &&  return
  is_dir   "$pkg"           &&  trace  rm  -rf  "$pkg"
  is_dir   "$src"           &&  trace  rm  -rf  "$src"
  return  0  ;  }


#  void  ---------------------------------------------------------------  void


void_vars_set  ()  {    #  ------------------------------------  void_vars_set

  #  usage:  void_vars_set

  tgz_ver='20210930'
  tgz_url='https://alpha.de.repo.voidlinux.org/live/current'
  tgz_url="${tgz_url}/void-x86_64-ROOTFS-${tgz_ver}.tar.xz"

  tgz_sha256='8681b060e39e173682e1721a6088280c2b6eade628f5e5e3e8e4b74163d187f6'
  tgz_b2='697b2e4e92c3fce1d74fea30fc3c9b95324a01ff59cb4cacf493a0ff29d750b7'

  tgz="${tgz_url##*/}"

  dist_path="$vland_dir/dist/void/$tgz"  ;  }


void_download  ()  {    #  ------------------------------------  void_download
  #  usage:  void_download
  [ -e "$dist_path" ]  &&  return
  echo  ;  echo  'void_download'
  void_vars_set
  lib_download  "$tgz_url"  "$dist_path"  ;  }


void_verify  ()  {    #  ----------------------------------------  void_verify
  #  usage:  void_verify
  echo  ;  echo  'void_verify'
  void_vars_set
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256  ;  }


void_extract  ()  {    #  --------------------------------------  void_extract
  #  usage:  void_extract
  guest_exists  &&  die  "vland  error  guest already exists  '$guest'"
  void_download
  void_verify
  echo  ;  echo  'void_extract'
  trace  mkdir  -p  "$guest"
  trace  tar  xJf "$dist_path"  -C "$guest"  ;  }


void_configure  ()  {    #  ----------------------------------  void_configure
  #  usage:  void_configure
  echo  ;  echo  'void_configure'
  trace  resolv_conf_sync  "$guest"/etc/resolv.conf
  return  ;  }


void_create  ()  {    #  ----------------------------------------  void_create
  #  usage:  void_create
  void_vars_set
  void_extract
  void_configure
  echo  ;  echo  'vland  void_create  done'  ;  }


#  void_musl  -----------------------------------------------------  void_musl


void_musl_vars_set  ()  {    #  --------------------------  void_musl_vars_set

  #  usage:  void_musl_vars_set

  tgz_ver='20210930'
  tgz_url='https://alpha.de.repo.voidlinux.org/live/current'
  tgz_url="${tgz_url}/void-x86_64-musl-ROOTFS-${tgz_ver}.tar.xz"

  tgz_sha256='d322171b39e3c670faa2835f6c6bba27951a9710f018410e090247b651f9251a'
  tgz_b2='b35d71e4c330dc47412e3e8e1a4c99482ef306f0dff39ce494a4164babf5baca'

  tgz="${tgz_url##*/}"

  dist_path="$vland_dir/dist/void-musl/$tgz"  ;  }


void_musl_download  ()  {    #  --------------------------  void_musl_download
  #  usage:  void_download
  [ -e "$dist_path" ]  &&  return
  echo  ;  echo  'void_download'
  void_musl_vars_set
  lib_download  "$tgz_url"  "$dist_path"  ;  }


void_musl_verify  ()  {    #  ------------------------------  void_musl_verify
  #  usage:  void_verify
  echo  ;  echo  'void_verify'
  void_musl_vars_set
  lib_verify  "$dist_path"  "$tgz_sha256"    sha256sum
  lib_verify  "$dist_path"  "$tgz_b2"        b2sum  -l 256  ;  }


void_musl_create  ()  {    #  ------------------------------  void_musl_create
  #  usage:  void_musl_create
  void_musl_vars_set
  void_extract
  void_configure
  echo  ;  echo  'vland  void_musl_create  done'  ;  }


void_pkg_install  ()  {    #  ------------------------------  void_pkg_install
  trace  lxr  -nr  --  xbps-install  --sync  --yes  "$@"  ;  }


#  self_test  -----------------------------------------------------  self_test


self_test_clean  ()  {    #  --------------------------------  self_test_clean
  #  usage:  self_test_clean
  echo  ;  echo  '+  self_test_clean'
  [ -d              "$vland_dir"/guest/vland-self-test ]  &&
    trace  rm  -rf  "$vland_dir"/guest/vland-self-test
  [ -d              "$vland_dir"/overlay/vland-self-test ]  &&
    trace  rm  -rf  "$vland_dir"/overlay/vland-self-test
  return  0  ;  }


self_test  ()  {    #  --------------------------------------------  self_test

  #  usage:  self_test

  [ -d "$vland_dir"/guest/vland-self-test/alpine ]  ||
    trace  vland  --create  alpine  vland-self-test/alpine

  [ -d "$vland_dir"/guest/vland-self-test/arch ]  ||
    trace  vland  --create  arch  vland-self-test/arch

  trace  vland  --pkg  vland-self-test/alpine  install        zsh
  trace  vland  --pkg  vland-self-test/alpine  build-install  lua5.4

  trace  vland  --pkg  vland-self-test/arch  install        zsh
  trace  vland  --pkg  vland-self-test/arch  build-install  lua
  trace  vland  --aur  vland-self-test/arch  build-install  jed-snapshot

  echo
  echo  '/=========================================================\'
  echo  '|                                                         |'
  echo  '|            ./vland --self-test  results                 |'
  echo  '|                                                         |'
  echo  '\=========================================================/'

  echo  ;  trace  vland  vland-self-test/alpine  --  zsh  --version
  echo  ;  trace  vland  vland-self-test/alpine  --  lua5.4  -v
  echo  ;  trace  vland  vland-self-test/arch  --  zsh  --version
  echo  ;  trace  vland  vland-self-test/arch  --  lua  -v
  echo  ;  trace  vland  vland-self-test/arch  --  jed  --version  |  head  -1

  echo
  echo  '/=========================================================\'
  echo  '|                                                         |'
  echo  '|            ./vland --self-test  done                    |'
  echo  '|                                                         |'
  echo  '\=========================================================/'  ;  }


self_test_full_distro  ()  (    #  --------------------  self_test_full_distro

  #  usage  self_test_full_distro  distro

  local  distro="$1"
  local  gn="vland-self-test/${distro}-full"    #  guest name

  [ -d "$vland_dir"/guest/"$gn" ]  ||  trace  vland  --create  "$distro"  "$gn"

  trace  config_overlay  "$gn"    #  to set $overlay_home
  trace  mkdir  -p  "$overlay_home"
  trace  cp  "$VLAND_EXE"  "$overlay_home"/vland

  case  "$distro"  in
    ( alpine           )    local  pkgs='bash  curl  tar        xz'  ;;
    ( arch             )    local  pkgs='                 wget    '  ;;
    ( void | void-musl )    local  pkgs='      curl       wget  xz'  ;;
    ( * )  die  "self_test_full_distro  invalid distro  '$distro'"   ;;  esac

  [ "$pkgs" ]  &&  trace  vland  --pkg  "$gn"  install  $pkgs

  trace  vland  "$gn"  -n  --  /bin/bash  ./vland  --self-test
  mute   self_test_clean
  return  ;  )


self_test_full  ()  {    #  ----------------------------------  self_test_full

  #  usage:  self_test_full

  self_test  ;  mute  self_test_clean
  self_test_full_distro  alpine
  self_test_full_distro  arch

  #  self_test_full_distro  void
  #  self_test_full_distro  void-musl

  return  ;  }


#  arch_web_seeds  -------------------------------------------  arch_web_seeds


#  to update the list of arch_web_seeds
#    $  apt-get  install  transmission-cli
#    $  wget  https://archlinux.org/releng/releases/2022.08.05/torrent/
#    $  transmission-show  index.html
#    then cut and paste the list of seeds below


arch_web_seeds='
  https://mirror.aarnet.edu.au/pub/archlinux/iso/2022.08.05/
  https://mirrors.rit.edu/archlinux/iso/2022.08.05/
  https://ftp.heanet.ie/mirrors/ftp.archlinux.org/iso/2022.08.05/
  https://mirror.puzzle.ch/archlinux/iso/2022.08.05/
  https://mirror.csclub.uwaterloo.ca/archlinux/iso/2022.08.05/
  https://mirror.umd.edu/archlinux/iso/2022.08.05/
  https://mirror.archlinux.no/iso/2022.08.05/
  https://mirror.isoc.org.il/pub/archlinux/iso/2022.08.05/
  https://ftp.osuosl.org/pub/archlinux/iso/2022.08.05/
  https://mirror.yandex.ru/archlinux/iso/2022.08.05/
  https://ftp.spline.inf.fu-berlin.de/mirrors/archlinux/iso/2022.08.05/
  https://mirror.selfnet.de/archlinux/iso/2022.08.05/
  https://mirrors.lug.mtu.edu/archlinux/iso/2022.08.05/
  https://archlinux.nautile.nc/archlinux/iso/2022.08.05/
  https://mirrors.kernel.org/archlinux/iso/2022.08.05/
  https://ftp.rnl.tecnico.ulisboa.pt/pub/archlinux/iso/2022.08.05/
  https://mirrors.dotsrc.org/archlinux/iso/2022.08.05/
  https://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/2022.08.05/
  https://ftp.halifax.rwth-aachen.de/archlinux/iso/2022.08.05/
  https://archlinux.cs.nycu.edu.tw/iso/2022.08.05/
  https://shadow.ind.ntou.edu.tw/archlinux/iso/2022.08.05/
  https://mirrors.rutgers.edu/archlinux/iso/2022.08.05/
  https://mirrors.nix.org.ua/linux/archlinux/iso/2022.08.05/
  https://mirrors.ustc.edu.cn/archlinux/iso/2022.08.05/
  https://ftp.lysator.liu.se/pub/archlinux/iso/2022.08.05/
  https://mirror.ams1.nl.leaseweb.net/archlinux/iso/2022.08.05/
  https://mirror.dal10.us.leaseweb.net/archlinux/iso/2022.08.05/
  https://mirror.fra10.de.leaseweb.net/archlinux/iso/2022.08.05/
  https://mirror.mia11.us.leaseweb.net/archlinux/iso/2022.08.05/
  https://mirror.sfo12.us.leaseweb.net/archlinux/iso/2022.08.05/
  https://mirror.wdc1.us.leaseweb.net/archlinux/iso/2022.08.05/
  https://mirrors.n-ix.net/archlinux/iso/2022.08.05/
  https://mirror.dkm.cz/archlinux/iso/2022.08.05/
  https://mirror.lnx.sk/pub/linux/archlinux/iso/2022.08.05/
  https://mirror.ps.kz/archlinux/iso/2022.08.05/
  https://mirror.bytemark.co.uk/archlinux/iso/2022.08.05/
  https://mirror.rol.ru/archlinux/iso/2022.08.05/
  https://mirror.i3d.net/pub/archlinux/iso/2022.08.05/
  https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/2022.08.05/
  https://mirrors.neusoft.edu.cn/archlinux/iso/2022.08.05/
  https://www.mirrorservice.org/sites/ftp.archlinux.org/iso/2022.08.05/
  https://mirror.netcologne.de/archlinux/iso/2022.08.05/
  https://archlinux.vi-di.fr/iso/2022.08.05/
  https://mirror.system.is/arch/iso/2022.08.05/
  https://dfw.mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://hkg.mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://iad.mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://lon.mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://ord.mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://syd.mirror.rackspace.com/archlinux/iso/2022.08.05/
  https://arch.mirror.constant.com/iso/2022.08.05/
  https://mirror.premi.st/archlinux/iso/2022.08.05/
  https://download.nus.edu.sg/mirror/archlinux/iso/2022.08.05/
  https://arch.nimukaito.net/iso/2022.08.05/
  https://mirror.neuf.no/archlinux/iso/2022.08.05/
  https://mirror.gnomus.de/iso/2022.08.05/
  https://ftp.fau.de/archlinux/iso/2022.08.05/
  https://gluttony.sin.cvut.cz/arch/iso/2022.08.05/
  https://mirror.one.com/archlinux/iso/2022.08.05/
  https://mirror.t-home.mk/archlinux/iso/2022.08.05/
  https://ftp.yzu.edu.tw/Linux/archlinux/iso/2022.08.05/
  https://mirror.metalgamer.eu/archlinux/iso/2022.08.05/
  https://mirrors.niyawe.de/archlinux/iso/2022.08.05/
  https://mirrors.atviras.lt/archlinux/iso/2022.08.05/
  https://arch.yourlabs.org/iso/2022.08.05/
  https://arch.midov.pl/arch/iso/2022.08.05/
  https://arch.mirror.zachlge.org/iso/2022.08.05/
  https://archlinux.koyanet.lv/archlinux/iso/2022.08.05/
  https://ftp.myrveln.se/pub/linux/archlinux/iso/2022.08.05/
  https://mirror.telepoint.bg/archlinux/iso/2022.08.05/
  https://archlinux.mailtunnel.eu/iso/2022.08.05/
  https://mirrors.cqu.edu.cn/archlinux/iso/2022.08.05/
  https://archlinux.mirror.digitalpacific.com.au/iso/2022.08.05/
  https://mirror.f4st.host/archlinux/iso/2022.08.05/
  https://mirrors.ocf.berkeley.edu/archlinux/iso/2022.08.05/
  https://ftp.acc.umu.se/mirror/archlinux/iso/2022.08.05/
  https://mirror.hackingand.coffee/arch/iso/2022.08.05/
  https://mirrors.uni-plovdiv.net/archlinux/iso/2022.08.05/
  https://mirror.pseudoform.org/iso/2022.08.05/
  https://mirror.lty.me/archlinux/iso/2022.08.05/
  https://arch.jensgutermuth.de/iso/2022.08.05/
  https://pkg.adfinis.com/archlinux/iso/2022.08.05/
  https://ftp.sh.cvut.cz/arch/iso/2022.08.05/
  https://arch-mirror.wtako.net/iso/2022.08.05/
  https://muug.ca/mirror/archlinux/iso/2022.08.05/
  https://mirror.0x.sg/archlinux/iso/2022.08.05/
  https://mirror.wormhole.eu/archlinux/iso/2022.08.05/
  https://mirror.kaminski.io/archlinux/iso/2022.08.05/
  https://mirror.ubrco.de/archlinux/iso/2022.08.05/
  https://archlinux.ip-connect.vn.ua/iso/2022.08.05/
  https://mirror.sergal.org/archlinux/iso/2022.08.05/
  https://mirrors.xjtu.edu.cn/archlinux/iso/2022.08.05/
  https://arlm.tyzoid.com/iso/2022.08.05/
  https://archlinux.thaller.ws/iso/2022.08.05/
  https://archimonde.ts.si/archlinux/iso/2022.08.05/
  https://www.ratenzahlung.de/mirror/archlinux/iso/2022.08.05/
  https://mirror.smith.geek.nz/archlinux/iso/2022.08.05/
  https://archlinux.mirror.wearetriple.com/iso/2022.08.05/
  https://mirror.kku.ac.th/archlinux/iso/2022.08.05/
  https://mirror.osbeck.com/archlinux/iso/2022.08.05/
  https://glua.ua.pt/pub/archlinux/iso/2022.08.05/
  https://ftp.lanet.kr/pub/archlinux/iso/2022.08.05/
  https://mirrors.celianvdb.fr/archlinux/iso/2022.08.05/
  https://arch.mirror.square-r00t.net/iso/2022.08.05/
  https://mirror.xtom.com.hk/archlinux/iso/2022.08.05/
  https://mirror.truenetwork.ru/archlinux/iso/2022.08.05/
  https://mirrors.nxthost.com/archlinux/iso/2022.08.05/
  https://mirror-hk.koddos.net/archlinux/iso/2022.08.05/
  https://mirror.koddos.net/archlinux/iso/2022.08.05/
  https://ftp.wrz.de/pub/archlinux/iso/2022.08.05/
  https://mirror.thekinrar.fr/archlinux/iso/2022.08.05/
  https://mirror.neostrada.nl/archlinux/iso/2022.08.05/
  https://mirrors.ukfast.co.uk/sites/archlinux.org/iso/2022.08.05/
  https://archlinux.mivzakim.net/iso/2022.08.05/
  https://mirror.srv.fail/archlinux/iso/2022.08.05/
  https://mirror.reisenbauer.ee/archlinux/iso/2022.08.05/
  https://packages.oth-regensburg.de/archlinux/iso/2022.08.05/
  https://mirror.orbit-os.com/archlinux/iso/2022.08.05/
  https://mirror.stephen304.com/archlinux/iso/2022.08.05/
  https://mirrors.sjtug.sjtu.edu.cn/archlinux/iso/2022.08.05/
  https://mirrors.cat.net/archlinux/iso/2022.08.05/
  https://mirror.oldsql.cc/archlinux/iso/2022.08.05/
  https://arch.mirrors.lavatech.top/iso/2022.08.05/
  https://mirror.checkdomain.de/archlinux/iso/2022.08.05/
  https://mirrors.xtom.com/archlinux/iso/2022.08.05/
  https://dist-mirror.fem.tu-ilmenau.de/archlinux/iso/2022.08.05/
  https://mirror.fsmg.org.nz/archlinux/iso/2022.08.05/
  https://archlinux.grena.ge/iso/2022.08.05/
  https://archlinux.mirror.pcextreme.nl/iso/2022.08.05/
  https://mirror.cyberbits.eu/archlinux/iso/2022.08.05/
  https://repo.ialab.dsu.edu/archlinux/iso/2022.08.05/
  https://arch.unixpeople.org/iso/2022.08.05/
  https://archlinux.mirror.liquidtelecom.com/iso/2022.08.05/
  https://nova.quantum-mirror.hu/mirrors/pub/archlinux/iso/2022.08.05/
  https://quantum-mirror.hu/mirrors/pub/archlinux/iso/2022.08.05/
  https://super.quantum-mirror.hu/mirrors/pub/archlinux/iso/2022.08.05/
  https://archlinux.uk.mirror.allworldit.com/archlinux/iso/2022.08.05/
  https://archlinux.za.mirror.allworldit.com/archlinux/iso/2022.08.05/
  https://mirror.librelabucm.org/archlinux/iso/2022.08.05/
  https://mirror-archlinux.webruimtehosting.nl/iso/2022.08.05/
  https://mirror.netweaver.uk/archlinux/iso/2022.08.05/
  https://mirror.wtnet.de/archlinux/iso/2022.08.05/
  https://mirror.mirohost.net/archlinux/iso/2022.08.05/
  https://ftp.harukasan.org/archlinux/iso/2022.08.05/
  https://mirror.ufro.cl/archlinux/iso/2022.08.05/
  https://mirror.aktkn.sg/archlinux/iso/2022.08.05/
  https://mirrors.xtom.nl/archlinux/iso/2022.08.05/
  https://mirror.scd31.com/arch/iso/2022.08.05/
  https://ftp.icm.edu.pl/pub/Linux/dist/archlinux/iso/2022.08.05/
  https://mirror.mikrogravitation.org/archlinux/iso/2022.08.05/
  https://mirror.chaoticum.net/arch/iso/2022.08.05/
  https://iad.mirrors.misaka.one/archlinux/iso/2022.08.05/
  https://mirror.pit.teraswitch.com/archlinux/iso/2022.08.05/
  https://archlinux.mirror.liteserver.nl/iso/2022.08.05/
  https://mirrors.ims.nksc.lt/archlinux/iso/2022.08.05/
  https://mirrors.eric.ovh/arch/iso/2022.08.05/
  https://mirror.arizona.edu/archlinux/iso/2022.08.05/
  https://mirror.cloroformo.org/archlinux/iso/2022.08.05/
  https://mirror2.evolution-host.com/archlinux/iso/2022.08.05/
  https://mirror.redrock.team/archlinux/iso/2022.08.05/
  https://archmirror1.octyl.net/iso/2022.08.05/
  https://mirror.telkomuniversity.ac.id/archlinux/iso/2022.08.05/
  https://mirror.serverion.com/archlinux/iso/2022.08.05/
  https://plug-mirror.rcac.purdue.edu/archlinux/iso/2022.08.05/
  https://mirror.efect.ro/archlinux/iso/2022.08.05/
  https://mirrors.mit.edu/archlinux/iso/2022.08.05/
  https://arch.hu.fo/archlinux/iso/2022.08.05/
  https://mirrors.chroot.ro/archlinux/iso/2022.08.05/
  https://mirrors.melbourne.co.uk/archlinux/iso/2022.08.05/
  https://mirror.tarellia.net/distr/archlinux/iso/2022.08.05/
  https://mirrors.piconets.webwerks.in/archlinux-mirror/iso/2022.08.05/
  https://mirrors.urbanwave.co.za/archlinux/iso/2022.08.05/
  https://mirrors.dgut.edu.cn/archlinux/iso/2022.08.05/
  https://mirror.sysa.tech/archlinux/iso/2022.08.05/
  https://mirror.rasanegar.com/archlinux/iso/2022.08.05/
  https://mirror.wuki.li/archlinux/iso/2022.08.05/
  https://ftp.sudhip.com/archlinux/iso/2022.08.05/
  https://mirrors.bfsu.edu.cn/archlinux/iso/2022.08.05/
  https://mirroir.wptheme.fr/archlinux/iso/2022.08.05/
  https://mirror.kumi.systems/archlinux/iso/2022.08.05/
  https://mirrors.slaanesh.org/archlinux/iso/2022.08.05/
  https://mirrors.nju.edu.cn/archlinux/iso/2022.08.05/
  https://mirror1.cl.netactuate.com/archlinux/iso/2022.08.05/
  https://mirrors.gethosted.online/archlinux/iso/2022.08.05/
  https://phinau.de/arch/iso/2022.08.05/
  https://mirror.anquan.cl/archlinux/iso/2022.08.05/
  https://mirrors.daan.vodka/archlinux/iso/2022.08.05/
  https://mirror.satis-faction.de/archlinux/iso/2022.08.05/
  https://mirror.gi.co.id/archlinux/iso/2022.08.05/
  https://mirror.papua.go.id/archlinux/iso/2022.08.05/
  https://mirror.lyrahosting.com/archlinux/iso/2022.08.05/
  https://mirror.hodgepodge.dev/archlinux/iso/2022.08.05/
  https://repo.inara.pk/archlinux/iso/2022.08.05/
  https://mirror.dogado.de/archlinux/iso/2022.08.05/
  https://mirror.clientvps.com/archlinux/iso/2022.08.05/
  https://zxcvfdsa.com/arch/iso/2022.08.05/
  https://mirror.ihost.md/archlinux/iso/2022.08.05/
  https://pkg.fef.moe/archlinux/iso/2022.08.05/
  https://mirror.ette.biz/archlinux/iso/2022.08.05/
  https://theswissbay.ch/archlinux/iso/2022.08.05/
  https://archmirror.it/repos/iso/2022.08.05/
  https://mirror.anigil.com/archlinux/iso/2022.08.05/
  https://mirrors.hit.edu.cn/archlinux/iso/2022.08.05/
  https://mirror.hoster.kz/archlinux/iso/2022.08.05/
  https://arch.lucassymons.net/iso/2022.08.05/
  https://ftp.agdsn.de/pub/mirrors/archlinux/iso/2022.08.05/
  https://mirror.ava.dev/archlinux/iso/2022.08.05/
  https://mirror.guillaumea.fr/archlinux/iso/2022.08.05/
  https://vpsmurah.jagoanhosting.com/archlinux/iso/2022.08.05/
  https://mirror.arctic.lol/ArchMirror/iso/2022.08.05/
  https://mirror.surf/archlinux/iso/2022.08.05/
  https://mirror.cspacehostings.com/archlinux/iso/2022.08.05/
  https://arch.mcstrugs.org/iso/2022.08.05/
  https://repo.greeklug.gr/data/pub/linux/archlinux/iso/2022.08.05/
  https://arch.jsc.mx/iso/2022.08.05/
  https://mirror.darklinux.uk/archlinux/iso/2022.08.05/
  https://free.nchc.org.tw/arch/iso/2022.08.05/
  https://mirror.juniorjpdj.pl/archlinux/iso/2022.08.05/
  https://archlinux.qontinuum.space/archlinux/iso/2022.08.05/
  https://mirror.nw-sys.ru/archlinux/iso/2022.08.05/
  https://repo.skni.umcs.pl/archlinux/iso/2022.08.05/
  https://mirror.cybersecurity.nmt.edu/archlinux/iso/2022.08.05/
  https://mirror.0xem.ma/arch/iso/2022.08.05/
  https://mirror.cj2.nl/archlinux/iso/2022.08.05/
  https://mirror.hostup.org/archlinux/iso/2022.08.05/
  https://mirrors.xtom.de/archlinux/iso/2022.08.05/
  https://mirrors.xtom.ee/archlinux/iso/2022.08.05/
  https://mirror.cyberbits.asia/archlinux/iso/2022.08.05/
  https://mirror.moson.org/arch/iso/2022.08.05/
  https://mirror.phx1.us.spryservers.net/archlinux/iso/2022.08.05/
  https://arch.yhtez.xyz/iso/2022.08.05/
  https://mirror.2degrees.nz/archlinux/iso/2022.08.05/
  https://mirror.powerfly.ca/archlinux/iso/2022.08.05/
  https://ftp.ludd.ltu.se/mirrors/archlinux/iso/2022.08.05/
  https://mirror.jingk.ai/archlinux/iso/2022.08.05/
  https://mirrors.wsyu.edu.cn/archlinux/iso/2022.08.05/
  https://mirrors.radwebhosting.com/archlinux/iso/2022.08.05/
  https://mirror.theash.xyz/arch/iso/2022.08.05/
  https://mirror.cov.ukservers.com/archlinux/iso/2022.08.05/
  https://archlinux.astra.in.ua/iso/2022.08.05/
  https://ftp.psnc.pl/linux/archlinux/iso/2022.08.05/
  https://mirror.clarkson.edu/archlinux/iso/2022.08.05/
  https://mirror.repository.id/archlinux/iso/2022.08.05/
  https://repo.endpoint.ml/archlinux/iso/2022.08.05/
  https://mirrors.viflcraft.top/archlinux/iso/2022.08.05/
  https://mirror.iusearchbtw.nl/iso/2022.08.05/
  https://mirrors.up.pt/pub/archlinux/iso/2022.08.05/
  https://mirror.bardia.tech/archlinux/iso/2022.08.05/
  https://at.arch.mirror.kescher.at/iso/2022.08.05/
  https://de.arch.mirror.kescher.at/iso/2022.08.05/
  https://archlinux.qern-industries.pw/iso/2022.08.05/
  https://archlinux.homeinfo.de/iso/2022.08.05/
  https://archlinux.ourhome.kiwi/iso/2022.08.05/
  https://archlinux-br.com.br/archlinux/iso/2022.08.05/
  https://mirror.flokinet.net/archlinux/iso/2022.08.05/
  https://mirror.ibakerserver.pt/Arch/iso/2022.08.05/
  https://mirror.funami.tech/arch/iso/2022.08.05/
  https://mirrors.aliyun.com/archlinux/iso/2022.08.05/
  https://mirror.safe-con.dk/archlinux/iso/2022.08.05/
  https://archlinux.mirror.luzea.de/iso/2022.08.05/
  https://mirror.sg.gs/archlinux/iso/2022.08.05/
  https://mirror.jaime.sh/archlinux/iso/2022.08.05/
  https://mirrors.gandi.net/archlinux/iso/2022.08.05/
  https://os.codefionn.eu/archlinux/iso/2022.08.05/
  https://mirrors.janbruckner.de/archlinux/iso/2022.08.05/
  https://mirror.eloteam.tk/archlinux/iso/2022.08.05/
  https://arch.juline.tech/iso/2022.08.05/
  https://mirror.archlinux.tw/ArchLinux/iso/2022.08.05/
  https://archlinux.mirror.net.in/archlinux/iso/2022.08.05/
  https://mirror.alwyzon.net/archlinux/iso/2022.08.05/
  https://lysakermoen.com/Software/Linux/Mirrors/ArchLinux/iso/2022.08.05/
  https://mirror.theo546.fr/archlinux/iso/2022.08.05/
  https://mirror2.sandyriver.net/pub/archlinux/iso/2022.08.05/
  https://mirror.albony.xyz/archlinux/iso/2022.08.05/
  https://mirror.informatik.tu-freiberg.de/arch/iso/2022.08.05/
  https://depo.turkiye.linux.web.tr/archlinux/iso/2022.08.05/
  https://mirror.tmmworkshop.com/archlinux/iso/2022.08.05/
  https://mirrors.42tm.tech/archlinux/iso/2022.08.05/
  https://mirroir.labhouse.fr/arch/iso/2022.08.05/
  https://mirrors.bloomu.edu/archlinux/iso/2022.08.05/
  https://arch.tux.si/mirror/iso/2022.08.05/
  https://codingflyboy.mm.fcix.net/archlinux/iso/2022.08.05/
  https://coresite.mm.fcix.net/archlinux/iso/2022.08.05/
  https://mirror.fcix.net/archlinux/iso/2022.08.05/
  https://mnvoip.mm.fcix.net/archlinux/iso/2022.08.05/
  https://ridgewireless.mm.fcix.net/archlinux/iso/2022.08.05/
  https://america.mirror.pkgbuild.com/iso/2022.08.05/
  https://asia.mirror.pkgbuild.com/iso/2022.08.05/
  https://europe.mirror.pkgbuild.com/iso/2022.08.05/
  https://geo.mirror.pkgbuild.com/iso/2022.08.05/
  https://seoul.mirror.pkgbuild.com/iso/2022.08.05/
  https://sydney.mirror.pkgbuild.com/iso/2022.08.05/
  https://mirrors.njupt.edu.cn/archlinux/iso/2022.08.05/
  https://in-mirror.garudalinux.org/archlinux/iso/2022.08.05/
  https://mirror.kamtv.ru/archlinux/iso/2022.08.05/
  https://mirrors.shanghaitech.edu.cn/archlinux/iso/2022.08.05/
  https://mirror.sahil.world/archlinux/iso/2022.08.05/
  https://mirror.xenyth.net/archlinux/iso/2022.08.05/
  https://mirrors.vectair.net/archlinux/iso/2022.08.05/
  https://mirrors.nxtgen.com/archlinux-mirror/iso/2022.08.05/
  https://arch.mirror.ivo.st/iso/2022.08.05/
  https://mirror.misakamikoto.network/archlinux/iso/2022.08.05/
  https://fastmirror.pp.ua/archlinux/iso/2022.08.05/
  https://mirror.mangohost.net/archlinux/iso/2022.08.05/
  https://mirror.lebedinets.ru/archlinux/iso/2022.08.05/
  https://arch.kyberorg.fi/iso/2022.08.05/
'    #  end  arch_web_seeds


#  main  ---------------------------------------------------------------  main


main_fix  ()  {    #  ----------------------------------------------  main_fix
  case  "$1"  in
    ( --* )  ;;
    ( -*  )  local a="$1" b="$2";  shift 2;  set -- "$b" "$a" "$@"  ;;
    ( *   )  ;;  esac
  main  "$@"  ;  exit  0  ;  }


main_fix  "$@"  ;  exit  0




#  vland.sh  -  Create and use chroot-style virtual software environments.
#
#  Copyright (c) 2022 Parke Bostrom, parke.nexus at gmail.com
#
#  This program is free software: you can redistribute it and/or
#  modify it under the terms of version 3 of the GNU General Public
#  License as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See version 3
#  of the GNU General Public License for more details.
#
#  You should have received a copy of version 3 of the GNU General
#  Public License along with this program.  If not, see
#  <https://www.gnu.org/licenses/>.
